// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/stephenpmurray/gqlgen/graph/model"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	ApiTokens struct {
		GoogleMaps func(childComplexity int) int
		ID         func(childComplexity int) int
		Mapbox     func(childComplexity int) int
	}

	Block struct {
		Chart           func(childComplexity int) int
		Connections     func(childComplexity int) int
		DisplayName     func(childComplexity int) int
		ID              func(childComplexity int) int
		Resources       func(childComplexity int) int
		SelectedVersion func(childComplexity int) int
		Status          func(childComplexity int) int
		Values          func(childComplexity int) int
	}

	BlockChart struct {
		AvailableVersions func(childComplexity int) int
		Categories        func(childComplexity int) int
		ChartYaml         func(childComplexity int) int
		Description       func(childComplexity int) int
		DisplayName       func(childComplexity int) int
		ID                func(childComplexity int) int
		LogoURL           func(childComplexity int) int
		Name              func(childComplexity int) int
		ValuesYaml        func(childComplexity int) int
		Vendor            func(childComplexity int) int
		Version           func(childComplexity int) int
	}

	ChartKey struct {
		Name    func(childComplexity int) int
		Version func(childComplexity int) int
	}

	Connection struct {
		Category    func(childComplexity int) int
		Description func(childComplexity int) int
		Entity      func(childComplexity int) int
		ID          func(childComplexity int) int
		Kind        func(childComplexity int) int
		Name        func(childComplexity int) int
		Source      func(childComplexity int) int
	}

	ConnectionEntity struct {
		ID   func(childComplexity int) int
		Type func(childComplexity int) int
	}

	Dependencies struct {
		Services func(childComplexity int) int
	}

	Device struct {
		Connections  func(childComplexity int, kindCatPairs []*model.KindCatPair) int
		DisplayName  func(childComplexity int) int
		HostIP       func(childComplexity int) int
		ID           func(childComplexity int) int
		IconType     func(childComplexity int) int
		Img          func(childComplexity int) int
		IpmiAddress  func(childComplexity int) int
		IpmiUsername func(childComplexity int) int
		Links        func(childComplexity int, tags []*model.TagInput, bbox *model.BBox) int
		Mac          func(childComplexity int) int
		NztpWorkflow func(childComplexity int) int
		Parents      func(childComplexity int) int
		Position     func(childComplexity int) int
		ProbeIP      func(childComplexity int) int
		Progress     func(childComplexity int) int
		Site         func(childComplexity int) int
		Specs        func(childComplexity int) int
		Status       func(childComplexity int) int
		Tags         func(childComplexity int) int
		TelemetryURL func(childComplexity int) int
	}

	DeviceLink struct {
		Device  func(childComplexity int) int
		ID      func(childComplexity int) int
		Metrics func(childComplexity int, dimensions []string) int
		Status  func(childComplexity int) int
	}

	DevicesResult struct {
		Devices func(childComplexity int) int
		Hits    func(childComplexity int) int
	}

	FieldParam struct {
		Name  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	KPI struct {
		Name  func(childComplexity int) int
		Type  func(childComplexity int) int
		Value func(childComplexity int) int
	}

	LatLng struct {
		Lat func(childComplexity int) int
		Lng func(childComplexity int) int
	}

	MapSettings struct {
		Center func(childComplexity int) int
		Zoom   func(childComplexity int) int
	}

	Metric struct {
		Dimension func(childComplexity int) int
		Timestamp func(childComplexity int) int
		Value     func(childComplexity int) int
	}

	Mutation struct {
		CreateSite            func(childComplexity int, site model.SiteInput) int
		CreateUser            func(childComplexity int, user model.CreateUserInput) int
		DeployServiceChain    func(childComplexity int, name string, blocks []*model.BlockInput) int
		Device                func(childComplexity int, dev model.DeviceInput) int
		EditDevice            func(childComplexity int, id string, device model.EditDeviceInput) int
		EditSite              func(childComplexity int, id string, site model.SiteInput) int
		IpmiCommand           func(childComplexity int, id string, cmd model.IpmiCommand) int
		Provision             func(childComplexity int, input model.ProvisionInput) int
		RemoveDevice          func(childComplexity int, id string) int
		RemoveServiceChain    func(childComplexity int, id string) int
		RemoveSite            func(childComplexity int, id string) int
		RemoveUser            func(childComplexity int, id string) int
		SetDefaultMapPosition func(childComplexity int, center model.LatLngInput, zoom int) int
		UpdateServiceChain    func(childComplexity int, id string, name string, blocks []*model.BlockInput) int
	}

	OktoResource struct {
		ID        func(childComplexity int) int
		Kind      func(childComplexity int) int
		Manifest  func(childComplexity int) int
		Name      func(childComplexity int) int
		Namespace func(childComplexity int) int
		Status    func(childComplexity int) int
	}

	Progress struct {
		Goal func(childComplexity int) int
		Step func(childComplexity int) int
	}

	ProvisionChart struct {
		BaremetalValues func(childComplexity int) int
		Name            func(childComplexity int) int
		SoftwareValues  func(childComplexity int) int
		Version         func(childComplexity int) int
	}

	Query struct {
		APITokens       func(childComplexity int) int
		BlockChart      func(childComplexity int, name string, version *string) int
		BlockCharts     func(childComplexity int, category *string, vendors []string) int
		Connections     func(childComplexity int, entities []string, kindCatPairs []*model.KindCatPair) int
		Devices         func(childComplexity int, id *string, tags []*model.TagInput, parents []string, bbox *model.BBox, searchTerm *string) int
		LoggedInUser    func(childComplexity int) int
		NearbyDevices   func(childComplexity int, device string, tags []*model.TagInput, radius *float64, latency *float64) int
		OktoResource    func(childComplexity int, name string, kind string, namespace string) int
		ProvisionChart  func(childComplexity int, name string, version string) int
		ProvisionCharts func(childComplexity int) int
		ServiceChain    func(childComplexity int, id string) int
		ServiceChains   func(childComplexity int) int
		Settings        func(childComplexity int) int
		Site            func(childComplexity int, id *string) int
		Users           func(childComplexity int, org *string) int
		Version         func(childComplexity int) int
	}

	Server struct {
		Device      func(childComplexity int) int
		DiagramNode func(childComplexity int) int
		Pinned      func(childComplexity int) int
	}

	Service struct {
		Connections  func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		DiagramNode  func(childComplexity int) int
		Fields       func(childComplexity int) int
		ID           func(childComplexity int) int
		Kpis         func(childComplexity int) int
		Name         func(childComplexity int) int
		Owner        func(childComplexity int) int
		PlatformKPIs func(childComplexity int) int
		Status       func(childComplexity int) int
		Tenant       func(childComplexity int) int
		Using        func(childComplexity int) int
	}

	ServiceChain struct {
		Blocks       func(childComplexity int) int
		Connections  func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		ID           func(childComplexity int) int
		Kpis         func(childComplexity int) int
		Name         func(childComplexity int) int
		Owner        func(childComplexity int) int
		PlatformKPIs func(childComplexity int) int
		Servers      func(childComplexity int) int
		Status       func(childComplexity int) int
		Tenant       func(childComplexity int) int
		Using        func(childComplexity int) int
	}

	ServiceParam struct {
		Name func(childComplexity int) int
		Type func(childComplexity int) int
	}

	Settings struct {
		Map func(childComplexity int) int
	}

	Site struct {
		Ancestors   func(childComplexity int) int
		Description func(childComplexity int) int
		Devices     func(childComplexity int) int
		DisplayName func(childComplexity int) int
		ID          func(childComplexity int) int
		Sites       func(childComplexity int) int
	}

	Tag struct {
		Inc func(childComplexity int) int
		Key func(childComplexity int) int
	}

	User struct {
		Email func(childComplexity int) int
		ID    func(childComplexity int) int
		Name  func(childComplexity int) int
		Org   func(childComplexity int) int
		Role  func(childComplexity int) int
	}
}

type MutationResolver interface {
	Device(ctx context.Context, dev model.DeviceInput) (*model.Device, error)
	EditDevice(ctx context.Context, id string, device model.EditDeviceInput) (*model.Device, error)
	RemoveDevice(ctx context.Context, id string) (*string, error)
	IpmiCommand(ctx context.Context, id string, cmd model.IpmiCommand) (*bool, error)
	DeployServiceChain(ctx context.Context, name string, blocks []*model.BlockInput) (*model.ServiceChain, error)
	UpdateServiceChain(ctx context.Context, id string, name string, blocks []*model.BlockInput) (*model.ServiceChain, error)
	RemoveServiceChain(ctx context.Context, id string) (*string, error)
	Provision(ctx context.Context, input model.ProvisionInput) (*model.Device, error)
	SetDefaultMapPosition(ctx context.Context, center model.LatLngInput, zoom int) (*model.MapSettings, error)
	CreateSite(ctx context.Context, site model.SiteInput) (*model.Site, error)
	EditSite(ctx context.Context, id string, site model.SiteInput) (*model.Site, error)
	RemoveSite(ctx context.Context, id string) (*string, error)
	CreateUser(ctx context.Context, user model.CreateUserInput) (*model.User, error)
	RemoveUser(ctx context.Context, id string) (*model.User, error)
}
type QueryResolver interface {
	APITokens(ctx context.Context) (*model.APITokens, error)
	Connections(ctx context.Context, entities []string, kindCatPairs []*model.KindCatPair) ([]*model.Connection, error)
	Devices(ctx context.Context, id *string, tags []*model.TagInput, parents []string, bbox *model.BBox, searchTerm *string) (*model.DevicesResult, error)
	NearbyDevices(ctx context.Context, device string, tags []*model.TagInput, radius *float64, latency *float64) (*model.DevicesResult, error)
	ServiceChain(ctx context.Context, id string) (*model.ServiceChain, error)
	ServiceChains(ctx context.Context) ([]*model.ServiceChain, error)
	BlockChart(ctx context.Context, name string, version *string) (*model.BlockChart, error)
	BlockCharts(ctx context.Context, category *string, vendors []string) ([]*model.BlockChart, error)
	ProvisionChart(ctx context.Context, name string, version string) (*model.ProvisionChart, error)
	ProvisionCharts(ctx context.Context) ([]*model.ChartKey, error)
	Settings(ctx context.Context) (*model.Settings, error)
	Site(ctx context.Context, id *string) (*model.Site, error)
	LoggedInUser(ctx context.Context) (*model.User, error)
	Users(ctx context.Context, org *string) ([]*model.User, error)
	Version(ctx context.Context) (string, error)
	OktoResource(ctx context.Context, name string, kind string, namespace string) (*model.OktoResource, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "ApiTokens.googleMaps":
		if e.complexity.ApiTokens.GoogleMaps == nil {
			break
		}

		return e.complexity.ApiTokens.GoogleMaps(childComplexity), true

	case "ApiTokens.id":
		if e.complexity.ApiTokens.ID == nil {
			break
		}

		return e.complexity.ApiTokens.ID(childComplexity), true

	case "ApiTokens.mapbox":
		if e.complexity.ApiTokens.Mapbox == nil {
			break
		}

		return e.complexity.ApiTokens.Mapbox(childComplexity), true

	case "Block.chart":
		if e.complexity.Block.Chart == nil {
			break
		}

		return e.complexity.Block.Chart(childComplexity), true

	case "Block.connections":
		if e.complexity.Block.Connections == nil {
			break
		}

		return e.complexity.Block.Connections(childComplexity), true

	case "Block.displayName":
		if e.complexity.Block.DisplayName == nil {
			break
		}

		return e.complexity.Block.DisplayName(childComplexity), true

	case "Block.id":
		if e.complexity.Block.ID == nil {
			break
		}

		return e.complexity.Block.ID(childComplexity), true

	case "Block.resources":
		if e.complexity.Block.Resources == nil {
			break
		}

		return e.complexity.Block.Resources(childComplexity), true

	case "Block.selectedVersion":
		if e.complexity.Block.SelectedVersion == nil {
			break
		}

		return e.complexity.Block.SelectedVersion(childComplexity), true

	case "Block.status":
		if e.complexity.Block.Status == nil {
			break
		}

		return e.complexity.Block.Status(childComplexity), true

	case "Block.values":
		if e.complexity.Block.Values == nil {
			break
		}

		return e.complexity.Block.Values(childComplexity), true

	case "BlockChart.availableVersions":
		if e.complexity.BlockChart.AvailableVersions == nil {
			break
		}

		return e.complexity.BlockChart.AvailableVersions(childComplexity), true

	case "BlockChart.categories":
		if e.complexity.BlockChart.Categories == nil {
			break
		}

		return e.complexity.BlockChart.Categories(childComplexity), true

	case "BlockChart.chartYaml":
		if e.complexity.BlockChart.ChartYaml == nil {
			break
		}

		return e.complexity.BlockChart.ChartYaml(childComplexity), true

	case "BlockChart.description":
		if e.complexity.BlockChart.Description == nil {
			break
		}

		return e.complexity.BlockChart.Description(childComplexity), true

	case "BlockChart.displayName":
		if e.complexity.BlockChart.DisplayName == nil {
			break
		}

		return e.complexity.BlockChart.DisplayName(childComplexity), true

	case "BlockChart.id":
		if e.complexity.BlockChart.ID == nil {
			break
		}

		return e.complexity.BlockChart.ID(childComplexity), true

	case "BlockChart.logoUrl":
		if e.complexity.BlockChart.LogoURL == nil {
			break
		}

		return e.complexity.BlockChart.LogoURL(childComplexity), true

	case "BlockChart.name":
		if e.complexity.BlockChart.Name == nil {
			break
		}

		return e.complexity.BlockChart.Name(childComplexity), true

	case "BlockChart.valuesYaml":
		if e.complexity.BlockChart.ValuesYaml == nil {
			break
		}

		return e.complexity.BlockChart.ValuesYaml(childComplexity), true

	case "BlockChart.vendor":
		if e.complexity.BlockChart.Vendor == nil {
			break
		}

		return e.complexity.BlockChart.Vendor(childComplexity), true

	case "BlockChart.version":
		if e.complexity.BlockChart.Version == nil {
			break
		}

		return e.complexity.BlockChart.Version(childComplexity), true

	case "ChartKey.name":
		if e.complexity.ChartKey.Name == nil {
			break
		}

		return e.complexity.ChartKey.Name(childComplexity), true

	case "ChartKey.version":
		if e.complexity.ChartKey.Version == nil {
			break
		}

		return e.complexity.ChartKey.Version(childComplexity), true

	case "Connection.category":
		if e.complexity.Connection.Category == nil {
			break
		}

		return e.complexity.Connection.Category(childComplexity), true

	case "Connection.description":
		if e.complexity.Connection.Description == nil {
			break
		}

		return e.complexity.Connection.Description(childComplexity), true

	case "Connection.entity":
		if e.complexity.Connection.Entity == nil {
			break
		}

		return e.complexity.Connection.Entity(childComplexity), true

	case "Connection.id":
		if e.complexity.Connection.ID == nil {
			break
		}

		return e.complexity.Connection.ID(childComplexity), true

	case "Connection.kind":
		if e.complexity.Connection.Kind == nil {
			break
		}

		return e.complexity.Connection.Kind(childComplexity), true

	case "Connection.name":
		if e.complexity.Connection.Name == nil {
			break
		}

		return e.complexity.Connection.Name(childComplexity), true

	case "Connection.source":
		if e.complexity.Connection.Source == nil {
			break
		}

		return e.complexity.Connection.Source(childComplexity), true

	case "ConnectionEntity.id":
		if e.complexity.ConnectionEntity.ID == nil {
			break
		}

		return e.complexity.ConnectionEntity.ID(childComplexity), true

	case "ConnectionEntity.type":
		if e.complexity.ConnectionEntity.Type == nil {
			break
		}

		return e.complexity.ConnectionEntity.Type(childComplexity), true

	case "Dependencies.services":
		if e.complexity.Dependencies.Services == nil {
			break
		}

		return e.complexity.Dependencies.Services(childComplexity), true

	case "Device.connections":
		if e.complexity.Device.Connections == nil {
			break
		}

		args, err := ec.field_Device_connections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Device.Connections(childComplexity, args["kindCatPairs"].([]*model.KindCatPair)), true

	case "Device.displayName":
		if e.complexity.Device.DisplayName == nil {
			break
		}

		return e.complexity.Device.DisplayName(childComplexity), true

	case "Device.hostIp":
		if e.complexity.Device.HostIP == nil {
			break
		}

		return e.complexity.Device.HostIP(childComplexity), true

	case "Device.id":
		if e.complexity.Device.ID == nil {
			break
		}

		return e.complexity.Device.ID(childComplexity), true

	case "Device.iconType":
		if e.complexity.Device.IconType == nil {
			break
		}

		return e.complexity.Device.IconType(childComplexity), true

	case "Device.img":
		if e.complexity.Device.Img == nil {
			break
		}

		return e.complexity.Device.Img(childComplexity), true

	case "Device.ipmiAddress":
		if e.complexity.Device.IpmiAddress == nil {
			break
		}

		return e.complexity.Device.IpmiAddress(childComplexity), true

	case "Device.ipmiUsername":
		if e.complexity.Device.IpmiUsername == nil {
			break
		}

		return e.complexity.Device.IpmiUsername(childComplexity), true

	case "Device.links":
		if e.complexity.Device.Links == nil {
			break
		}

		args, err := ec.field_Device_links_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Device.Links(childComplexity, args["tags"].([]*model.TagInput), args["bbox"].(*model.BBox)), true

	case "Device.mac":
		if e.complexity.Device.Mac == nil {
			break
		}

		return e.complexity.Device.Mac(childComplexity), true

	case "Device.nztpWorkflow":
		if e.complexity.Device.NztpWorkflow == nil {
			break
		}

		return e.complexity.Device.NztpWorkflow(childComplexity), true

	case "Device.parents":
		if e.complexity.Device.Parents == nil {
			break
		}

		return e.complexity.Device.Parents(childComplexity), true

	case "Device.position":
		if e.complexity.Device.Position == nil {
			break
		}

		return e.complexity.Device.Position(childComplexity), true

	case "Device.probeIp":
		if e.complexity.Device.ProbeIP == nil {
			break
		}

		return e.complexity.Device.ProbeIP(childComplexity), true

	case "Device.progress":
		if e.complexity.Device.Progress == nil {
			break
		}

		return e.complexity.Device.Progress(childComplexity), true

	case "Device.site":
		if e.complexity.Device.Site == nil {
			break
		}

		return e.complexity.Device.Site(childComplexity), true

	case "Device.specs":
		if e.complexity.Device.Specs == nil {
			break
		}

		return e.complexity.Device.Specs(childComplexity), true

	case "Device.status":
		if e.complexity.Device.Status == nil {
			break
		}

		return e.complexity.Device.Status(childComplexity), true

	case "Device.tags":
		if e.complexity.Device.Tags == nil {
			break
		}

		return e.complexity.Device.Tags(childComplexity), true

	case "Device.telemetryUrl":
		if e.complexity.Device.TelemetryURL == nil {
			break
		}

		return e.complexity.Device.TelemetryURL(childComplexity), true

	case "DeviceLink.device":
		if e.complexity.DeviceLink.Device == nil {
			break
		}

		return e.complexity.DeviceLink.Device(childComplexity), true

	case "DeviceLink.id":
		if e.complexity.DeviceLink.ID == nil {
			break
		}

		return e.complexity.DeviceLink.ID(childComplexity), true

	case "DeviceLink.metrics":
		if e.complexity.DeviceLink.Metrics == nil {
			break
		}

		args, err := ec.field_DeviceLink_metrics_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.DeviceLink.Metrics(childComplexity, args["dimensions"].([]string)), true

	case "DeviceLink.status":
		if e.complexity.DeviceLink.Status == nil {
			break
		}

		return e.complexity.DeviceLink.Status(childComplexity), true

	case "DevicesResult.devices":
		if e.complexity.DevicesResult.Devices == nil {
			break
		}

		return e.complexity.DevicesResult.Devices(childComplexity), true

	case "DevicesResult.hits":
		if e.complexity.DevicesResult.Hits == nil {
			break
		}

		return e.complexity.DevicesResult.Hits(childComplexity), true

	case "FieldParam.name":
		if e.complexity.FieldParam.Name == nil {
			break
		}

		return e.complexity.FieldParam.Name(childComplexity), true

	case "FieldParam.value":
		if e.complexity.FieldParam.Value == nil {
			break
		}

		return e.complexity.FieldParam.Value(childComplexity), true

	case "KPI.name":
		if e.complexity.KPI.Name == nil {
			break
		}

		return e.complexity.KPI.Name(childComplexity), true

	case "KPI.type":
		if e.complexity.KPI.Type == nil {
			break
		}

		return e.complexity.KPI.Type(childComplexity), true

	case "KPI.value":
		if e.complexity.KPI.Value == nil {
			break
		}

		return e.complexity.KPI.Value(childComplexity), true

	case "LatLng.lat":
		if e.complexity.LatLng.Lat == nil {
			break
		}

		return e.complexity.LatLng.Lat(childComplexity), true

	case "LatLng.lng":
		if e.complexity.LatLng.Lng == nil {
			break
		}

		return e.complexity.LatLng.Lng(childComplexity), true

	case "MapSettings.center":
		if e.complexity.MapSettings.Center == nil {
			break
		}

		return e.complexity.MapSettings.Center(childComplexity), true

	case "MapSettings.zoom":
		if e.complexity.MapSettings.Zoom == nil {
			break
		}

		return e.complexity.MapSettings.Zoom(childComplexity), true

	case "Metric.dimension":
		if e.complexity.Metric.Dimension == nil {
			break
		}

		return e.complexity.Metric.Dimension(childComplexity), true

	case "Metric.timestamp":
		if e.complexity.Metric.Timestamp == nil {
			break
		}

		return e.complexity.Metric.Timestamp(childComplexity), true

	case "Metric.value":
		if e.complexity.Metric.Value == nil {
			break
		}

		return e.complexity.Metric.Value(childComplexity), true

	case "Mutation.createSite":
		if e.complexity.Mutation.CreateSite == nil {
			break
		}

		args, err := ec.field_Mutation_createSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateSite(childComplexity, args["site"].(model.SiteInput)), true

	case "Mutation.createUser":
		if e.complexity.Mutation.CreateUser == nil {
			break
		}

		args, err := ec.field_Mutation_createUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.CreateUser(childComplexity, args["user"].(model.CreateUserInput)), true

	case "Mutation.deployServiceChain":
		if e.complexity.Mutation.DeployServiceChain == nil {
			break
		}

		args, err := ec.field_Mutation_deployServiceChain_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeployServiceChain(childComplexity, args["name"].(string), args["blocks"].([]*model.BlockInput)), true

	case "Mutation.device":
		if e.complexity.Mutation.Device == nil {
			break
		}

		args, err := ec.field_Mutation_device_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Device(childComplexity, args["dev"].(model.DeviceInput)), true

	case "Mutation.editDevice":
		if e.complexity.Mutation.EditDevice == nil {
			break
		}

		args, err := ec.field_Mutation_editDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditDevice(childComplexity, args["id"].(string), args["device"].(model.EditDeviceInput)), true

	case "Mutation.editSite":
		if e.complexity.Mutation.EditSite == nil {
			break
		}

		args, err := ec.field_Mutation_editSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.EditSite(childComplexity, args["id"].(string), args["site"].(model.SiteInput)), true

	case "Mutation.ipmiCommand":
		if e.complexity.Mutation.IpmiCommand == nil {
			break
		}

		args, err := ec.field_Mutation_ipmiCommand_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.IpmiCommand(childComplexity, args["id"].(string), args["cmd"].(model.IpmiCommand)), true

	case "Mutation.provision":
		if e.complexity.Mutation.Provision == nil {
			break
		}

		args, err := ec.field_Mutation_provision_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Provision(childComplexity, args["input"].(model.ProvisionInput)), true

	case "Mutation.removeDevice":
		if e.complexity.Mutation.RemoveDevice == nil {
			break
		}

		args, err := ec.field_Mutation_removeDevice_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveDevice(childComplexity, args["id"].(string)), true

	case "Mutation.removeServiceChain":
		if e.complexity.Mutation.RemoveServiceChain == nil {
			break
		}

		args, err := ec.field_Mutation_removeServiceChain_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveServiceChain(childComplexity, args["id"].(string)), true

	case "Mutation.removeSite":
		if e.complexity.Mutation.RemoveSite == nil {
			break
		}

		args, err := ec.field_Mutation_removeSite_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveSite(childComplexity, args["id"].(string)), true

	case "Mutation.removeUser":
		if e.complexity.Mutation.RemoveUser == nil {
			break
		}

		args, err := ec.field_Mutation_removeUser_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RemoveUser(childComplexity, args["id"].(string)), true

	case "Mutation.setDefaultMapPosition":
		if e.complexity.Mutation.SetDefaultMapPosition == nil {
			break
		}

		args, err := ec.field_Mutation_setDefaultMapPosition_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SetDefaultMapPosition(childComplexity, args["center"].(model.LatLngInput), args["zoom"].(int)), true

	case "Mutation.updateServiceChain":
		if e.complexity.Mutation.UpdateServiceChain == nil {
			break
		}

		args, err := ec.field_Mutation_updateServiceChain_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UpdateServiceChain(childComplexity, args["id"].(string), args["name"].(string), args["blocks"].([]*model.BlockInput)), true

	case "OktoResource.id":
		if e.complexity.OktoResource.ID == nil {
			break
		}

		return e.complexity.OktoResource.ID(childComplexity), true

	case "OktoResource.kind":
		if e.complexity.OktoResource.Kind == nil {
			break
		}

		return e.complexity.OktoResource.Kind(childComplexity), true

	case "OktoResource.manifest":
		if e.complexity.OktoResource.Manifest == nil {
			break
		}

		return e.complexity.OktoResource.Manifest(childComplexity), true

	case "OktoResource.name":
		if e.complexity.OktoResource.Name == nil {
			break
		}

		return e.complexity.OktoResource.Name(childComplexity), true

	case "OktoResource.namespace":
		if e.complexity.OktoResource.Namespace == nil {
			break
		}

		return e.complexity.OktoResource.Namespace(childComplexity), true

	case "OktoResource.status":
		if e.complexity.OktoResource.Status == nil {
			break
		}

		return e.complexity.OktoResource.Status(childComplexity), true

	case "Progress.goal":
		if e.complexity.Progress.Goal == nil {
			break
		}

		return e.complexity.Progress.Goal(childComplexity), true

	case "Progress.step":
		if e.complexity.Progress.Step == nil {
			break
		}

		return e.complexity.Progress.Step(childComplexity), true

	case "ProvisionChart.baremetalValues":
		if e.complexity.ProvisionChart.BaremetalValues == nil {
			break
		}

		return e.complexity.ProvisionChart.BaremetalValues(childComplexity), true

	case "ProvisionChart.name":
		if e.complexity.ProvisionChart.Name == nil {
			break
		}

		return e.complexity.ProvisionChart.Name(childComplexity), true

	case "ProvisionChart.softwareValues":
		if e.complexity.ProvisionChart.SoftwareValues == nil {
			break
		}

		return e.complexity.ProvisionChart.SoftwareValues(childComplexity), true

	case "ProvisionChart.version":
		if e.complexity.ProvisionChart.Version == nil {
			break
		}

		return e.complexity.ProvisionChart.Version(childComplexity), true

	case "Query.apiTokens":
		if e.complexity.Query.APITokens == nil {
			break
		}

		return e.complexity.Query.APITokens(childComplexity), true

	case "Query.blockChart":
		if e.complexity.Query.BlockChart == nil {
			break
		}

		args, err := ec.field_Query_blockChart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BlockChart(childComplexity, args["name"].(string), args["version"].(*string)), true

	case "Query.blockCharts":
		if e.complexity.Query.BlockCharts == nil {
			break
		}

		args, err := ec.field_Query_blockCharts_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.BlockCharts(childComplexity, args["category"].(*string), args["vendors"].([]string)), true

	case "Query.connections":
		if e.complexity.Query.Connections == nil {
			break
		}

		args, err := ec.field_Query_connections_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Connections(childComplexity, args["entities"].([]string), args["kindCatPairs"].([]*model.KindCatPair)), true

	case "Query.devices":
		if e.complexity.Query.Devices == nil {
			break
		}

		args, err := ec.field_Query_devices_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Devices(childComplexity, args["id"].(*string), args["tags"].([]*model.TagInput), args["parents"].([]string), args["bbox"].(*model.BBox), args["searchTerm"].(*string)), true

	case "Query.loggedInUser":
		if e.complexity.Query.LoggedInUser == nil {
			break
		}

		return e.complexity.Query.LoggedInUser(childComplexity), true

	case "Query.nearbyDevices":
		if e.complexity.Query.NearbyDevices == nil {
			break
		}

		args, err := ec.field_Query_nearbyDevices_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.NearbyDevices(childComplexity, args["device"].(string), args["tags"].([]*model.TagInput), args["radius"].(*float64), args["latency"].(*float64)), true

	case "Query.oktoResource":
		if e.complexity.Query.OktoResource == nil {
			break
		}

		args, err := ec.field_Query_oktoResource_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.OktoResource(childComplexity, args["name"].(string), args["kind"].(string), args["namespace"].(string)), true

	case "Query.provisionChart":
		if e.complexity.Query.ProvisionChart == nil {
			break
		}

		args, err := ec.field_Query_provisionChart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ProvisionChart(childComplexity, args["name"].(string), args["version"].(string)), true

	case "Query.provisionCharts":
		if e.complexity.Query.ProvisionCharts == nil {
			break
		}

		return e.complexity.Query.ProvisionCharts(childComplexity), true

	case "Query.serviceChain":
		if e.complexity.Query.ServiceChain == nil {
			break
		}

		args, err := ec.field_Query_serviceChain_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.ServiceChain(childComplexity, args["id"].(string)), true

	case "Query.serviceChains":
		if e.complexity.Query.ServiceChains == nil {
			break
		}

		return e.complexity.Query.ServiceChains(childComplexity), true

	case "Query.settings":
		if e.complexity.Query.Settings == nil {
			break
		}

		return e.complexity.Query.Settings(childComplexity), true

	case "Query.site":
		if e.complexity.Query.Site == nil {
			break
		}

		args, err := ec.field_Query_site_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Site(childComplexity, args["id"].(*string)), true

	case "Query.users":
		if e.complexity.Query.Users == nil {
			break
		}

		args, err := ec.field_Query_users_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Users(childComplexity, args["org"].(*string)), true

	case "Query.version":
		if e.complexity.Query.Version == nil {
			break
		}

		return e.complexity.Query.Version(childComplexity), true

	case "Server.device":
		if e.complexity.Server.Device == nil {
			break
		}

		return e.complexity.Server.Device(childComplexity), true

	case "Server.diagramNode":
		if e.complexity.Server.DiagramNode == nil {
			break
		}

		return e.complexity.Server.DiagramNode(childComplexity), true

	case "Server.pinned":
		if e.complexity.Server.Pinned == nil {
			break
		}

		return e.complexity.Server.Pinned(childComplexity), true

	case "Service.connections":
		if e.complexity.Service.Connections == nil {
			break
		}

		return e.complexity.Service.Connections(childComplexity), true

	case "Service.createdAt":
		if e.complexity.Service.CreatedAt == nil {
			break
		}

		return e.complexity.Service.CreatedAt(childComplexity), true

	case "Service.diagramNode":
		if e.complexity.Service.DiagramNode == nil {
			break
		}

		return e.complexity.Service.DiagramNode(childComplexity), true

	case "Service.fields":
		if e.complexity.Service.Fields == nil {
			break
		}

		return e.complexity.Service.Fields(childComplexity), true

	case "Service.id":
		if e.complexity.Service.ID == nil {
			break
		}

		return e.complexity.Service.ID(childComplexity), true

	case "Service.kpis":
		if e.complexity.Service.Kpis == nil {
			break
		}

		return e.complexity.Service.Kpis(childComplexity), true

	case "Service.name":
		if e.complexity.Service.Name == nil {
			break
		}

		return e.complexity.Service.Name(childComplexity), true

	case "Service.owner":
		if e.complexity.Service.Owner == nil {
			break
		}

		return e.complexity.Service.Owner(childComplexity), true

	case "Service.platformKPIs":
		if e.complexity.Service.PlatformKPIs == nil {
			break
		}

		return e.complexity.Service.PlatformKPIs(childComplexity), true

	case "Service.status":
		if e.complexity.Service.Status == nil {
			break
		}

		return e.complexity.Service.Status(childComplexity), true

	case "Service.tenant":
		if e.complexity.Service.Tenant == nil {
			break
		}

		return e.complexity.Service.Tenant(childComplexity), true

	case "Service.using":
		if e.complexity.Service.Using == nil {
			break
		}

		return e.complexity.Service.Using(childComplexity), true

	case "ServiceChain.blocks":
		if e.complexity.ServiceChain.Blocks == nil {
			break
		}

		return e.complexity.ServiceChain.Blocks(childComplexity), true

	case "ServiceChain.connections":
		if e.complexity.ServiceChain.Connections == nil {
			break
		}

		return e.complexity.ServiceChain.Connections(childComplexity), true

	case "ServiceChain.createdAt":
		if e.complexity.ServiceChain.CreatedAt == nil {
			break
		}

		return e.complexity.ServiceChain.CreatedAt(childComplexity), true

	case "ServiceChain.id":
		if e.complexity.ServiceChain.ID == nil {
			break
		}

		return e.complexity.ServiceChain.ID(childComplexity), true

	case "ServiceChain.kpis":
		if e.complexity.ServiceChain.Kpis == nil {
			break
		}

		return e.complexity.ServiceChain.Kpis(childComplexity), true

	case "ServiceChain.name":
		if e.complexity.ServiceChain.Name == nil {
			break
		}

		return e.complexity.ServiceChain.Name(childComplexity), true

	case "ServiceChain.owner":
		if e.complexity.ServiceChain.Owner == nil {
			break
		}

		return e.complexity.ServiceChain.Owner(childComplexity), true

	case "ServiceChain.platformKPIs":
		if e.complexity.ServiceChain.PlatformKPIs == nil {
			break
		}

		return e.complexity.ServiceChain.PlatformKPIs(childComplexity), true

	case "ServiceChain.servers":
		if e.complexity.ServiceChain.Servers == nil {
			break
		}

		return e.complexity.ServiceChain.Servers(childComplexity), true

	case "ServiceChain.status":
		if e.complexity.ServiceChain.Status == nil {
			break
		}

		return e.complexity.ServiceChain.Status(childComplexity), true

	case "ServiceChain.tenant":
		if e.complexity.ServiceChain.Tenant == nil {
			break
		}

		return e.complexity.ServiceChain.Tenant(childComplexity), true

	case "ServiceChain.using":
		if e.complexity.ServiceChain.Using == nil {
			break
		}

		return e.complexity.ServiceChain.Using(childComplexity), true

	case "ServiceParam.name":
		if e.complexity.ServiceParam.Name == nil {
			break
		}

		return e.complexity.ServiceParam.Name(childComplexity), true

	case "ServiceParam.type":
		if e.complexity.ServiceParam.Type == nil {
			break
		}

		return e.complexity.ServiceParam.Type(childComplexity), true

	case "Settings.map":
		if e.complexity.Settings.Map == nil {
			break
		}

		return e.complexity.Settings.Map(childComplexity), true

	case "Site.ancestors":
		if e.complexity.Site.Ancestors == nil {
			break
		}

		return e.complexity.Site.Ancestors(childComplexity), true

	case "Site.description":
		if e.complexity.Site.Description == nil {
			break
		}

		return e.complexity.Site.Description(childComplexity), true

	case "Site.devices":
		if e.complexity.Site.Devices == nil {
			break
		}

		return e.complexity.Site.Devices(childComplexity), true

	case "Site.displayName":
		if e.complexity.Site.DisplayName == nil {
			break
		}

		return e.complexity.Site.DisplayName(childComplexity), true

	case "Site.id":
		if e.complexity.Site.ID == nil {
			break
		}

		return e.complexity.Site.ID(childComplexity), true

	case "Site.sites":
		if e.complexity.Site.Sites == nil {
			break
		}

		return e.complexity.Site.Sites(childComplexity), true

	case "Tag.inc":
		if e.complexity.Tag.Inc == nil {
			break
		}

		return e.complexity.Tag.Inc(childComplexity), true

	case "Tag.key":
		if e.complexity.Tag.Key == nil {
			break
		}

		return e.complexity.Tag.Key(childComplexity), true

	case "User.email":
		if e.complexity.User.Email == nil {
			break
		}

		return e.complexity.User.Email(childComplexity), true

	case "User.id":
		if e.complexity.User.ID == nil {
			break
		}

		return e.complexity.User.ID(childComplexity), true

	case "User.name":
		if e.complexity.User.Name == nil {
			break
		}

		return e.complexity.User.Name(childComplexity), true

	case "User.org":
		if e.complexity.User.Org == nil {
			break
		}

		return e.complexity.User.Org(childComplexity), true

	case "User.role":
		if e.complexity.User.Role == nil {
			break
		}

		return e.complexity.User.Role(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	inputUnmarshalMap := graphql.BuildUnmarshalerMap(
		ec.unmarshalInputBBox,
		ec.unmarshalInputBlockConnectionInput,
		ec.unmarshalInputBlockInput,
		ec.unmarshalInputConnectionInput,
		ec.unmarshalInputCreateUserInput,
		ec.unmarshalInputDeployTargetInput,
		ec.unmarshalInputDeviceInput,
		ec.unmarshalInputEditConnectionInput,
		ec.unmarshalInputEditDeviceInput,
		ec.unmarshalInputKindCatPair,
		ec.unmarshalInputLatLngInput,
		ec.unmarshalInputProvisionInput,
		ec.unmarshalInputServerInput,
		ec.unmarshalInputSiteInput,
		ec.unmarshalInputTagInput,
	)
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			ctx = graphql.WithUnmarshalerMap(ctx, inputUnmarshalMap)
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "../../schema/apiTokens.graphql", Input: `type ApiTokens {
  id: ID!
  googleMaps: String
  mapbox: String
}
`, BuiltIn: false},
	{Name: "../../schema/connection.graphql", Input: `type Connection {
  id: ID!
  category: String!
  description: String

  "Parent entity providing the connection"
  entity: ConnectionEntity

  kind: String!
  name: String!
  source: String!
}

type ConnectionEntity {
  id: ID!
  type: EntityType
}

enum EntityType {
  UNKNOWN
  BLOCK
  DEVICE
}

input ConnectionInput {
  category: String!
  kind: String!
  name: String!
  source: String!
}

input EditConnectionInput {
  id: ID!
  category: String!
  kind: String!
  name: String!
  source: String!
}

"pair of kind / category for search parameters"
input KindCatPair {
  category: String!
  kind: String!
}
`, BuiltIn: false},
	{Name: "../../schema/device.graphql", Input: `type Site {
  id: ID!
  displayName: String
  description: String
  ancestors: [Site]
  sites: [Site]
  devices: DevicesResult
}

input SiteInput {
  displayName: String
  description: String

  "Top-down ordered list of ancestor site IDs. If empty, site is created at the top level"
  ancestors: [ID!]
}

type DevicesResult {
  devices: [Device!]
  hits: Int
}

type Progress {
  step: Int!
  goal: Int!
}

type Device {
  id: ID!
  tags: [String!]
  parents: [ID!]
  displayName: String
  img: String
  iconType: String
  position: LatLng
  specs: String
  status: DeviceStatus
  progress: Progress
  mac: String
  probeIp: String
  nztpWorkflow: String
  ipmiAddress: String
  ipmiUsername: String
  hostIp: String
  links(tags: [TagInput!], bbox: BBox): [DeviceLink!]
  telemetryUrl: String @deprecated(reason: "telemetryUrl duplicated in connections")
  connections(kindCatPairs: [KindCatPair!]): [Connection]
  site: String
}

type DeviceLink {
  id: ID!
  device: Device
  status: String
  metrics(dimensions: [String!]): [Metric]
}

type Metric {
  dimension: String!
  value: Float
  timestamp: Time
}

type LatLng {
  lat: Float!
  lng: Float!
}

enum DeviceStatus {
  UNKNOWN
  READY
  DEPLOYING
}

"""
Properties of a new device to be registered
"""
input DeviceInput {
  "List of connections (e.g. video streams, APIs) available on the device"
  connections: [ConnectionInput!]

  "List of tags that describe the device"
  tags: [String!]

  "List of IDs of parent devices"
  parents: [ID!]

  "Display name of device to be shown in the UI"
  displayName: String

  "Path to device image (currently unused)"
  img: String @deprecated

  "Map icon of device (currently unused)"
  iconType: String @deprecated

  "Configuration file used to connect to Kubenetes Control Plane of a Cloudlet"
  kubeconfig: String

  "Geographical position of device"
  position: LatLngInput

  "MAC address of device"
  mac: String

  "IP the probes should use to collect network metrics from the device"
  probeIp: String

  "Near Zero-Touch Provisioning server address"
  nztpServer: String

  "Near Zero-Touch Provisioning workflow"
  nztpWorkflow: String

  "Address of the IPMI management interface of the device"
  ipmiAddress: String

  "Username used to authenticate when issuing IPMI commands"
  ipmiUsername: String

  "Password used to authenticate when issuing IPMI commands"
  ipmiPassword: String

  "Site that device belongs to"
  site: String!
}

input EditDeviceInput {
  "Display name of device to be shown in the UI"
  displayName: String

  "List of tags that describe the device"
  tags: [String!]

  "Geographical position of device"
  position: LatLngInput

  "Near Zero-Touch Provisioning workflow"
  nztpWorkflow: String

  "Near Zero-Touch Provisioning flag to provision on next boot"
  nztpProvision: Boolean

  "Address of the IPMI management interface of the device"
  ipmiAddress: String

  "Username used to authenticate when issuing IPMI commands"
  ipmiUsername: String

  "Password used to authenticate when issuing IPMI commands"
  ipmiPassword: String

  connections: [EditConnectionInput!]

  deletedConnections: [ID!]

  "Site that device belongs to"
  site: String
}

input LatLngInput {
  "Degrees latitude"
  lat: Float!

  "Degrees longitude"
  lng: Float!
}

input BBox {
  "Northwesternmost point of a bounding box"
  nw: LatLngInput!

  "Southeasternmost point of a bounding box"
  se: LatLngInput!
}

enum IpmiCommand {
  RESTART
  RESET
  POWER_ON
  POWER_OFF
}
`, BuiltIn: false},
	{Name: "../../schema/provision.graphql", Input: `type ProvisionChart {
  "Unique chart name in Helm repo. name field in Chart.yaml"
  name: String!

  "version field in Chart.yaml"
  version: String!

  baremetalValues: String

  softwareValues: String
}

type ChartKey {
  "Unique chart name in Helm repo. name field in Chart.yaml"
  name: String!

  "version field in Chart.yaml"
  version: String!
}

input ProvisionInput {
  "Chart name in Helm repo"
  chartName: String!

  "Chart semantic version number"
  chartVersion: String!

  "Site selector for Provisioner block deployment"
  provisionerSite: ID!

  provisionInventory: String!

  "Display name of device to be shown in the UI"
  displayName: String!

  "Geographical position of device"
  position: LatLngInput!

  "Site that device belongs to"
  site: ID!
}
`, BuiltIn: false},
	{Name: "../../schema/schema.graphql", Input: `"An ISO 8601 formatted Date and Time"
scalar Time

schema {
  query: Query
  mutation: Mutation
}

type Query {
  apiTokens: ApiTokens

  connections(
    "List of parent entity (service or device) to filter by"
    entities: [ID!]

    "List of connection kinds and categorys to filter by"
    kindCatPairs: [KindCatPair!]
  ): [Connection]

  devices(
    "Device ID (overrides other parameters)"
    id: ID

    "List of tag filters"
    tags: [TagInput!]

    "List of IDs of parent devices that matching devices must have"
    parents: [ID!]

    "Geographic bounding box. Results outside this box will not be returned"
    bbox: BBox

    "Free text search field to filter by device display name, IP address and/or MAC address"
    searchTerm: String
  ): DevicesResult

  nearbyDevices(
    "ID of the reference device"
    device: ID!

    "List of tag filters"
    tags: [TagInput!]

    """
    Radius in metres of a circular cap on the Earth's surface,
    centered on the position of the reference device.
    Results outside this cap will not be returned.
    """
    radius: Float

    "Maximum network latency with the reference device, in milliseconds"
    latency: Float
  ): DevicesResult

  serviceChain("Service chain ID" id: ID!): ServiceChain

  serviceChains: [ServiceChain]

  blockChart(
    "Block Chart name"
    name: String!

    "Block Chart version. If unspecified, then the latest version is returned"
    version: String
  ): BlockChart

  "Return the latest version of all Block Charts in the registry"
  blockCharts(category: String, vendors: [ID!]): [BlockChart]

  "Return the baremetal / software values of a provision chart"
  provisionChart(name: String!, version: String!): ProvisionChart

  "Return a list of all versions of all provision Charts in the registry"
  provisionCharts: [ChartKey]

  settings: Settings

  "Return the Site with the given ID, or if the ID is null, the top level Site"
  site(id: ID): Site

  loggedInUser: User

  users(org: ID): [User]

  version: String!

  oktoResource(name: String!, kind: String!, namespace: String!): OktoResource
}

type Mutation {
  device("Properties of the new device to be registered" dev: DeviceInput!): Device

  editDevice(
    "ID of device to modify"
    id: ID!

    "Replacement properties of the existing device"
    device: EditDeviceInput!
  ): Device

  removeDevice("ID of device to remove" id: ID!): ID

  ipmiCommand(
    "ID of device to execute command on"
    id: ID!

    "IPMI command to be executed"
    cmd: IpmiCommand!
  ): Boolean

  deployServiceChain(
    "Display name of the service chain"
    name: String!

    "List of blocks in the service chain"
    blocks: [BlockInput!]
  ): ServiceChain

  updateServiceChain(
    "ID of service chain ID to update"
    id: ID!

    "New name for the service chain"
    name: String!

    "New list of blocks in the service chain"
    blocks: [BlockInput!]
  ): ServiceChain

  removeServiceChain("ID of the service chain to remove" id: ID!): ID

  provision(input: ProvisionInput!): Device

  setDefaultMapPosition(
    "Default (Lat, Lng) to initially center the map at"
    center: LatLngInput!

    "Default initial zoom level"
    zoom: Int!
  ): MapSettings

  createSite(site: SiteInput!): Site

  editSite(id: ID!, site: SiteInput!): Site

  removeSite(id: ID!): ID

  createUser(user: CreateUserInput!): User

  removeUser(id: ID!): User
}
`, BuiltIn: false},
	{Name: "../../schema/service.graphql", Input: `type Block {
  id: ID!
  displayName: String
  values: String
  selectedVersion: String
  chart: BlockChart
  status: Status
  connections: [Connection]
  resources: [OktoResource]
}

type OktoResource {
  id: ID!
  name: String
  kind: String
  status: Status
  namespace: String
  manifest: String
}

type BlockChart {
  "Chart digest, used for client caching. Cannot fetch by ID!"
  id: ID!

  "Unique chart name in Helm repo. name field in Chart.yaml"
  name: String!

  "version field in Chart.yaml"
  version: String!

  # available versions of the block. e.g: ["0.0.2", "0.0.1"]
  availableVersions: [String!]

  "keywords field in Chart.yaml"
  categories: [String!]

  "description field in Chart.yaml"
  description: String

  "full contents of Chart.yaml"
  chartYaml: String

  "annotations.displayName in Chart.yaml"
  displayName: String

  "values.yaml"
  valuesYaml: String

  "annotations.vendor field in Chart.yaml"
  vendor: String

  "icon field in Chart.yaml"
  logoUrl: String
}

type Service {
  id: ID!
  diagramNode: ID
  # human-readable instance name, assigned at deploy time
  name: String!
  using: Dependencies
  connections: [Connection]
  platformKPIs: [KPI]
  kpis: [KPI]
  status: Status
  fields: [FieldParam!]
  tenant: String
  owner: String
  createdAt: Time
}

type ServiceParam {
  name: String!
  type: String!
}

enum Status {
  READY
  DEPLOYING
  UNDEPLOYING
  FAILURE
  UNKNOWN
  PENDING
}

type Dependencies {
  services: [Service]
}

type KPI {
  name: String
  type: String
  value: String
}

type FieldParam {
  name: String!
  value: String!
}

input BlockConnectionInput {
  "Field name"
  name: String!

  "Connection ID"
  connId: ID!
}

type Server {
  diagramNode: ID!
  device: Device
  pinned: Boolean!
}

type ServiceChain {
  id: ID!
  name: String!
  blocks: [Block]
  using: Dependencies
  connections: [Connection]
  platformKPIs: [KPI]
  kpis: [KPI]
  servers: [Server]
  status: Status
  tenant: String
  owner: String
  createdAt: Time
}

input ServerInput {
  diagramNode: ID!
  device: ID!
  pinned: Boolean
}

input DeployTargetInput {
  master: ID!
  host: ID!
}

input BlockInput {
  """
  ID of a previously-deployed block to update.
  Providing this parameter implies an update to an existing block,
  whereas inputs with no ID will be treated as new blocks.
  """
  id: ID

  "Display name of the block"
  displayName: String!

  # blockChartRepoUrl: String! currently assuming fixed URL in Service Manager

  "Chart name in Helm repo"
  blockChartName: String!

  "Chart semantic version number"
  blockChartVersion: String!

  # blockChartDigest: String "Unique ID digest from the block chart" (shouldn't be necessary if we never overwrite Chart versions)

  "Override values in YAML format"
  values: String!
}
`, BuiltIn: false},
	{Name: "../../schema/settings.graphql", Input: `type Settings {
  map: MapSettings
}

type MapSettings {
  center: LatLng
  zoom: Int
}
`, BuiltIn: false},
	{Name: "../../schema/tag.graphql", Input: `input TagInput {
  key: String!
  inc: Boolean!
}

type Tag {
  key: String!
  inc: Boolean!
}
`, BuiltIn: false},
	{Name: "../../schema/user.graphql", Input: `enum Role {
  ADMIN
  OPERATOR
  VIEWER
}

type User {
  id: ID!
  name: String
  email: String
  org: Site
  role: Role
}

input CreateUserInput {
  name: String!
  email: String!
  org: ID!
  role: Role!
}
`, BuiltIn: false},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_DeviceLink_metrics_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["dimensions"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dimensions"))
		arg0, err = ec.unmarshalOString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dimensions"] = arg0
	return args, nil
}

func (ec *executionContext) field_Device_connections_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.KindCatPair
	if tmp, ok := rawArgs["kindCatPairs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kindCatPairs"))
		arg0, err = ec.unmarshalOKindCatPair2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKindCatPairᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kindCatPairs"] = arg0
	return args, nil
}

func (ec *executionContext) field_Device_links_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []*model.TagInput
	if tmp, ok := rawArgs["tags"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
		arg0, err = ec.unmarshalOTagInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐTagInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tags"] = arg0
	var arg1 *model.BBox
	if tmp, ok := rawArgs["bbox"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bbox"))
		arg1, err = ec.unmarshalOBBox2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBBox(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bbox"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_createSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.SiteInput
	if tmp, ok := rawArgs["site"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("site"))
		arg0, err = ec.unmarshalNSiteInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSiteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["site"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_createUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.CreateUserInput
	if tmp, ok := rawArgs["user"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("user"))
		arg0, err = ec.unmarshalNCreateUserInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐCreateUserInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["user"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_deployServiceChain_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 []*model.BlockInput
	if tmp, ok := rawArgs["blocks"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blocks"))
		arg1, err = ec.unmarshalOBlockInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["blocks"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_device_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.DeviceInput
	if tmp, ok := rawArgs["dev"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("dev"))
		arg0, err = ec.unmarshalNDeviceInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["dev"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_editDevice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.EditDeviceInput
	if tmp, ok := rawArgs["device"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device"))
		arg1, err = ec.unmarshalNEditDeviceInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐEditDeviceInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["device"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_editSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.SiteInput
	if tmp, ok := rawArgs["site"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("site"))
		arg1, err = ec.unmarshalNSiteInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSiteInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["site"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_ipmiCommand_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 model.IpmiCommand
	if tmp, ok := rawArgs["cmd"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cmd"))
		arg1, err = ec.unmarshalNIpmiCommand2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐIpmiCommand(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cmd"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_provision_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.ProvisionInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNProvisionInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐProvisionInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeDevice_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeServiceChain_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeSite_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_removeUser_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_setDefaultMapPosition_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 model.LatLngInput
	if tmp, ok := rawArgs["center"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("center"))
		arg0, err = ec.unmarshalNLatLngInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLngInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["center"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["zoom"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("zoom"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["zoom"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_updateServiceChain_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 []*model.BlockInput
	if tmp, ok := rawArgs["blocks"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blocks"))
		arg2, err = ec.unmarshalOBlockInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["blocks"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_blockChart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_blockCharts_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["category"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["category"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["vendors"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("vendors"))
		arg1, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["vendors"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_connections_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["entities"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("entities"))
		arg0, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["entities"] = arg0
	var arg1 []*model.KindCatPair
	if tmp, ok := rawArgs["kindCatPairs"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kindCatPairs"))
		arg1, err = ec.unmarshalOKindCatPair2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKindCatPairᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kindCatPairs"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_devices_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	var arg1 []*model.TagInput
	if tmp, ok := rawArgs["tags"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
		arg1, err = ec.unmarshalOTagInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐTagInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tags"] = arg1
	var arg2 []string
	if tmp, ok := rawArgs["parents"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parents"))
		arg2, err = ec.unmarshalOID2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["parents"] = arg2
	var arg3 *model.BBox
	if tmp, ok := rawArgs["bbox"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("bbox"))
		arg3, err = ec.unmarshalOBBox2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBBox(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["bbox"] = arg3
	var arg4 *string
	if tmp, ok := rawArgs["searchTerm"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("searchTerm"))
		arg4, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["searchTerm"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query_nearbyDevices_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["device"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["device"] = arg0
	var arg1 []*model.TagInput
	if tmp, ok := rawArgs["tags"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
		arg1, err = ec.unmarshalOTagInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐTagInputᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["tags"] = arg1
	var arg2 *float64
	if tmp, ok := rawArgs["radius"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("radius"))
		arg2, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["radius"] = arg2
	var arg3 *float64
	if tmp, ok := rawArgs["latency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("latency"))
		arg3, err = ec.unmarshalOFloat2ᚖfloat64(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["latency"] = arg3
	return args, nil
}

func (ec *executionContext) field_Query_oktoResource_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["kind"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["kind"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["namespace"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("namespace"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["namespace"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_provisionChart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["version"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("version"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["version"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_serviceChain_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNID2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_site_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_users_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["org"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["org"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _ApiTokens_id(ctx context.Context, field graphql.CollectedField, obj *model.APITokens) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApiTokens_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApiTokens_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiTokens",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiTokens_googleMaps(ctx context.Context, field graphql.CollectedField, obj *model.APITokens) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApiTokens_googleMaps(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GoogleMaps, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApiTokens_googleMaps(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiTokens",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ApiTokens_mapbox(ctx context.Context, field graphql.CollectedField, obj *model.APITokens) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ApiTokens_mapbox(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mapbox, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ApiTokens_mapbox(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ApiTokens",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_id(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_displayName(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_values(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_values(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Values, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_values(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_selectedVersion(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_selectedVersion(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SelectedVersion, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_selectedVersion(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_chart(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_chart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Chart, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlockChart)
	fc.Result = res
	return ec.marshalOBlockChart2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockChart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_chart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BlockChart_id(ctx, field)
			case "name":
				return ec.fieldContext_BlockChart_name(ctx, field)
			case "version":
				return ec.fieldContext_BlockChart_version(ctx, field)
			case "availableVersions":
				return ec.fieldContext_BlockChart_availableVersions(ctx, field)
			case "categories":
				return ec.fieldContext_BlockChart_categories(ctx, field)
			case "description":
				return ec.fieldContext_BlockChart_description(ctx, field)
			case "chartYaml":
				return ec.fieldContext_BlockChart_chartYaml(ctx, field)
			case "displayName":
				return ec.fieldContext_BlockChart_displayName(ctx, field)
			case "valuesYaml":
				return ec.fieldContext_BlockChart_valuesYaml(ctx, field)
			case "vendor":
				return ec.fieldContext_BlockChart_vendor(ctx, field)
			case "logoUrl":
				return ec.fieldContext_BlockChart_logoUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlockChart", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_status(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_connections(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_connections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Connection)
	fc.Result = res
	return ec.marshalOConnection2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_connections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Connection_id(ctx, field)
			case "category":
				return ec.fieldContext_Connection_category(ctx, field)
			case "description":
				return ec.fieldContext_Connection_description(ctx, field)
			case "entity":
				return ec.fieldContext_Connection_entity(ctx, field)
			case "kind":
				return ec.fieldContext_Connection_kind(ctx, field)
			case "name":
				return ec.fieldContext_Connection_name(ctx, field)
			case "source":
				return ec.fieldContext_Connection_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Connection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_resources(ctx context.Context, field graphql.CollectedField, obj *model.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_resources(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resources, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.OktoResource)
	fc.Result = res
	return ec.marshalOOktoResource2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐOktoResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_resources(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OktoResource_id(ctx, field)
			case "name":
				return ec.fieldContext_OktoResource_name(ctx, field)
			case "kind":
				return ec.fieldContext_OktoResource_kind(ctx, field)
			case "status":
				return ec.fieldContext_OktoResource_status(ctx, field)
			case "namespace":
				return ec.fieldContext_OktoResource_namespace(ctx, field)
			case "manifest":
				return ec.fieldContext_OktoResource_manifest(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OktoResource", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_id(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_name(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_version(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_availableVersions(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_availableVersions(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AvailableVersions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_availableVersions(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_categories(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_categories(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Categories, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_categories(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_description(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_chartYaml(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_chartYaml(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ChartYaml, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_chartYaml(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_displayName(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_valuesYaml(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_valuesYaml(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ValuesYaml, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_valuesYaml(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_vendor(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_vendor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Vendor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_vendor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockChart_logoUrl(ctx context.Context, field graphql.CollectedField, obj *model.BlockChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockChart_logoUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LogoURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockChart_logoUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartKey_name(ctx context.Context, field graphql.CollectedField, obj *model.ChartKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChartKey_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChartKey_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ChartKey_version(ctx context.Context, field graphql.CollectedField, obj *model.ChartKey) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ChartKey_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ChartKey_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ChartKey",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Connection_id(ctx context.Context, field graphql.CollectedField, obj *model.Connection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Connection_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Connection_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Connection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Connection_category(ctx context.Context, field graphql.CollectedField, obj *model.Connection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Connection_category(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Category, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Connection_category(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Connection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Connection_description(ctx context.Context, field graphql.CollectedField, obj *model.Connection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Connection_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Connection_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Connection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Connection_entity(ctx context.Context, field graphql.CollectedField, obj *model.Connection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Connection_entity(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Entity, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ConnectionEntity)
	fc.Result = res
	return ec.marshalOConnectionEntity2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnectionEntity(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Connection_entity(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Connection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ConnectionEntity_id(ctx, field)
			case "type":
				return ec.fieldContext_ConnectionEntity_type(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ConnectionEntity", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Connection_kind(ctx context.Context, field graphql.CollectedField, obj *model.Connection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Connection_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Connection_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Connection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Connection_name(ctx context.Context, field graphql.CollectedField, obj *model.Connection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Connection_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Connection_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Connection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Connection_source(ctx context.Context, field graphql.CollectedField, obj *model.Connection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Connection_source(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Source, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Connection_source(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Connection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionEntity_id(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionEntity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionEntity_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionEntity_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionEntity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ConnectionEntity_type(ctx context.Context, field graphql.CollectedField, obj *model.ConnectionEntity) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ConnectionEntity_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.EntityType)
	fc.Result = res
	return ec.marshalOEntityType2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐEntityType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ConnectionEntity_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ConnectionEntity",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type EntityType does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Dependencies_services(ctx context.Context, field graphql.CollectedField, obj *model.Dependencies) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Dependencies_services(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Services, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Service)
	fc.Result = res
	return ec.marshalOService2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Dependencies_services(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Dependencies",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Service_id(ctx, field)
			case "diagramNode":
				return ec.fieldContext_Service_diagramNode(ctx, field)
			case "name":
				return ec.fieldContext_Service_name(ctx, field)
			case "using":
				return ec.fieldContext_Service_using(ctx, field)
			case "connections":
				return ec.fieldContext_Service_connections(ctx, field)
			case "platformKPIs":
				return ec.fieldContext_Service_platformKPIs(ctx, field)
			case "kpis":
				return ec.fieldContext_Service_kpis(ctx, field)
			case "status":
				return ec.fieldContext_Service_status(ctx, field)
			case "fields":
				return ec.fieldContext_Service_fields(ctx, field)
			case "tenant":
				return ec.fieldContext_Service_tenant(ctx, field)
			case "owner":
				return ec.fieldContext_Service_owner(ctx, field)
			case "createdAt":
				return ec.fieldContext_Service_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Service", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_id(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_tags(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_tags(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_tags(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_parents(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_parents(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Parents, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOID2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_parents(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_displayName(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_img(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_img(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Img, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_img(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_iconType(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_iconType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IconType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_iconType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_position(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_position(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Position, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LatLng)
	fc.Result = res
	return ec.marshalOLatLng2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLng(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_position(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lat":
				return ec.fieldContext_LatLng_lat(ctx, field)
			case "lng":
				return ec.fieldContext_LatLng_lng(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LatLng", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_specs(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_specs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Specs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_specs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_status(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DeviceStatus)
	fc.Result = res
	return ec.marshalODeviceStatus2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type DeviceStatus does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_progress(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_progress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Progress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Progress)
	fc.Result = res
	return ec.marshalOProgress2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐProgress(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_progress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "step":
				return ec.fieldContext_Progress_step(ctx, field)
			case "goal":
				return ec.fieldContext_Progress_goal(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Progress", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_mac(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_mac(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Mac, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_mac(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_probeIp(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_probeIp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProbeIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_probeIp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_nztpWorkflow(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_nztpWorkflow(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NztpWorkflow, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_nztpWorkflow(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_ipmiAddress(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_ipmiAddress(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IpmiAddress, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_ipmiAddress(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_ipmiUsername(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_ipmiUsername(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IpmiUsername, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_ipmiUsername(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_hostIp(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_hostIp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HostIP, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_hostIp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_links(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_links(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Links, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.DeviceLink)
	fc.Result = res
	return ec.marshalODeviceLink2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceLinkᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_links(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_DeviceLink_id(ctx, field)
			case "device":
				return ec.fieldContext_DeviceLink_device(ctx, field)
			case "status":
				return ec.fieldContext_DeviceLink_status(ctx, field)
			case "metrics":
				return ec.fieldContext_DeviceLink_metrics(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DeviceLink", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Device_links_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Device_telemetryUrl(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_telemetryUrl(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TelemetryURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_telemetryUrl(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Device_connections(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_connections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Connection)
	fc.Result = res
	return ec.marshalOConnection2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_connections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Connection_id(ctx, field)
			case "category":
				return ec.fieldContext_Connection_category(ctx, field)
			case "description":
				return ec.fieldContext_Connection_description(ctx, field)
			case "entity":
				return ec.fieldContext_Connection_entity(ctx, field)
			case "kind":
				return ec.fieldContext_Connection_kind(ctx, field)
			case "name":
				return ec.fieldContext_Connection_name(ctx, field)
			case "source":
				return ec.fieldContext_Connection_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Connection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Device_connections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Device_site(ctx context.Context, field graphql.CollectedField, obj *model.Device) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Device_site(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Site, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Device_site(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Device",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceLink_id(ctx context.Context, field graphql.CollectedField, obj *model.DeviceLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceLink_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceLink_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceLink_device(ctx context.Context, field graphql.CollectedField, obj *model.DeviceLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceLink_device(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Device, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceLink_device(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Device_id(ctx, field)
			case "tags":
				return ec.fieldContext_Device_tags(ctx, field)
			case "parents":
				return ec.fieldContext_Device_parents(ctx, field)
			case "displayName":
				return ec.fieldContext_Device_displayName(ctx, field)
			case "img":
				return ec.fieldContext_Device_img(ctx, field)
			case "iconType":
				return ec.fieldContext_Device_iconType(ctx, field)
			case "position":
				return ec.fieldContext_Device_position(ctx, field)
			case "specs":
				return ec.fieldContext_Device_specs(ctx, field)
			case "status":
				return ec.fieldContext_Device_status(ctx, field)
			case "progress":
				return ec.fieldContext_Device_progress(ctx, field)
			case "mac":
				return ec.fieldContext_Device_mac(ctx, field)
			case "probeIp":
				return ec.fieldContext_Device_probeIp(ctx, field)
			case "nztpWorkflow":
				return ec.fieldContext_Device_nztpWorkflow(ctx, field)
			case "ipmiAddress":
				return ec.fieldContext_Device_ipmiAddress(ctx, field)
			case "ipmiUsername":
				return ec.fieldContext_Device_ipmiUsername(ctx, field)
			case "hostIp":
				return ec.fieldContext_Device_hostIp(ctx, field)
			case "links":
				return ec.fieldContext_Device_links(ctx, field)
			case "telemetryUrl":
				return ec.fieldContext_Device_telemetryUrl(ctx, field)
			case "connections":
				return ec.fieldContext_Device_connections(ctx, field)
			case "site":
				return ec.fieldContext_Device_site(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceLink_status(ctx context.Context, field graphql.CollectedField, obj *model.DeviceLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceLink_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceLink_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _DeviceLink_metrics(ctx context.Context, field graphql.CollectedField, obj *model.DeviceLink) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DeviceLink_metrics(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Metrics, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Metric)
	fc.Result = res
	return ec.marshalOMetric2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐMetric(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DeviceLink_metrics(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DeviceLink",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "dimension":
				return ec.fieldContext_Metric_dimension(ctx, field)
			case "value":
				return ec.fieldContext_Metric_value(ctx, field)
			case "timestamp":
				return ec.fieldContext_Metric_timestamp(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Metric", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_DeviceLink_metrics_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _DevicesResult_devices(ctx context.Context, field graphql.CollectedField, obj *model.DevicesResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DevicesResult_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DevicesResult_devices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DevicesResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Device_id(ctx, field)
			case "tags":
				return ec.fieldContext_Device_tags(ctx, field)
			case "parents":
				return ec.fieldContext_Device_parents(ctx, field)
			case "displayName":
				return ec.fieldContext_Device_displayName(ctx, field)
			case "img":
				return ec.fieldContext_Device_img(ctx, field)
			case "iconType":
				return ec.fieldContext_Device_iconType(ctx, field)
			case "position":
				return ec.fieldContext_Device_position(ctx, field)
			case "specs":
				return ec.fieldContext_Device_specs(ctx, field)
			case "status":
				return ec.fieldContext_Device_status(ctx, field)
			case "progress":
				return ec.fieldContext_Device_progress(ctx, field)
			case "mac":
				return ec.fieldContext_Device_mac(ctx, field)
			case "probeIp":
				return ec.fieldContext_Device_probeIp(ctx, field)
			case "nztpWorkflow":
				return ec.fieldContext_Device_nztpWorkflow(ctx, field)
			case "ipmiAddress":
				return ec.fieldContext_Device_ipmiAddress(ctx, field)
			case "ipmiUsername":
				return ec.fieldContext_Device_ipmiUsername(ctx, field)
			case "hostIp":
				return ec.fieldContext_Device_hostIp(ctx, field)
			case "links":
				return ec.fieldContext_Device_links(ctx, field)
			case "telemetryUrl":
				return ec.fieldContext_Device_telemetryUrl(ctx, field)
			case "connections":
				return ec.fieldContext_Device_connections(ctx, field)
			case "site":
				return ec.fieldContext_Device_site(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _DevicesResult_hits(ctx context.Context, field graphql.CollectedField, obj *model.DevicesResult) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_DevicesResult_hits(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hits, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_DevicesResult_hits(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "DevicesResult",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldParam_name(ctx context.Context, field graphql.CollectedField, obj *model.FieldParam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldParam_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldParam_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldParam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _FieldParam_value(ctx context.Context, field graphql.CollectedField, obj *model.FieldParam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_FieldParam_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_FieldParam_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "FieldParam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KPI_name(ctx context.Context, field graphql.CollectedField, obj *model.Kpi) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KPI_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KPI_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KPI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KPI_type(ctx context.Context, field graphql.CollectedField, obj *model.Kpi) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KPI_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KPI_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KPI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _KPI_value(ctx context.Context, field graphql.CollectedField, obj *model.Kpi) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_KPI_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_KPI_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "KPI",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LatLng_lat(ctx context.Context, field graphql.CollectedField, obj *model.LatLng) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LatLng_lat(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lat, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LatLng_lat(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LatLng",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _LatLng_lng(ctx context.Context, field graphql.CollectedField, obj *model.LatLng) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_LatLng_lng(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Lng, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(float64)
	fc.Result = res
	return ec.marshalNFloat2float64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_LatLng_lng(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "LatLng",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _MapSettings_center(ctx context.Context, field graphql.CollectedField, obj *model.MapSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MapSettings_center(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Center, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.LatLng)
	fc.Result = res
	return ec.marshalOLatLng2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLng(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MapSettings_center(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MapSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "lat":
				return ec.fieldContext_LatLng_lat(ctx, field)
			case "lng":
				return ec.fieldContext_LatLng_lng(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type LatLng", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _MapSettings_zoom(ctx context.Context, field graphql.CollectedField, obj *model.MapSettings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_MapSettings_zoom(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Zoom, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_MapSettings_zoom(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "MapSettings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metric_dimension(ctx context.Context, field graphql.CollectedField, obj *model.Metric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metric_dimension(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Dimension, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metric_dimension(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metric_value(ctx context.Context, field graphql.CollectedField, obj *model.Metric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metric_value(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Value, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*float64)
	fc.Result = res
	return ec.marshalOFloat2ᚖfloat64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metric_value(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Float does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Metric_timestamp(ctx context.Context, field graphql.CollectedField, obj *model.Metric) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Metric_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Metric_timestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Metric",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_device(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_device(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Device(rctx, fc.Args["dev"].(model.DeviceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_device(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Device_id(ctx, field)
			case "tags":
				return ec.fieldContext_Device_tags(ctx, field)
			case "parents":
				return ec.fieldContext_Device_parents(ctx, field)
			case "displayName":
				return ec.fieldContext_Device_displayName(ctx, field)
			case "img":
				return ec.fieldContext_Device_img(ctx, field)
			case "iconType":
				return ec.fieldContext_Device_iconType(ctx, field)
			case "position":
				return ec.fieldContext_Device_position(ctx, field)
			case "specs":
				return ec.fieldContext_Device_specs(ctx, field)
			case "status":
				return ec.fieldContext_Device_status(ctx, field)
			case "progress":
				return ec.fieldContext_Device_progress(ctx, field)
			case "mac":
				return ec.fieldContext_Device_mac(ctx, field)
			case "probeIp":
				return ec.fieldContext_Device_probeIp(ctx, field)
			case "nztpWorkflow":
				return ec.fieldContext_Device_nztpWorkflow(ctx, field)
			case "ipmiAddress":
				return ec.fieldContext_Device_ipmiAddress(ctx, field)
			case "ipmiUsername":
				return ec.fieldContext_Device_ipmiUsername(ctx, field)
			case "hostIp":
				return ec.fieldContext_Device_hostIp(ctx, field)
			case "links":
				return ec.fieldContext_Device_links(ctx, field)
			case "telemetryUrl":
				return ec.fieldContext_Device_telemetryUrl(ctx, field)
			case "connections":
				return ec.fieldContext_Device_connections(ctx, field)
			case "site":
				return ec.fieldContext_Device_site(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_device_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_editDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_editDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditDevice(rctx, fc.Args["id"].(string), fc.Args["device"].(model.EditDeviceInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_editDevice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Device_id(ctx, field)
			case "tags":
				return ec.fieldContext_Device_tags(ctx, field)
			case "parents":
				return ec.fieldContext_Device_parents(ctx, field)
			case "displayName":
				return ec.fieldContext_Device_displayName(ctx, field)
			case "img":
				return ec.fieldContext_Device_img(ctx, field)
			case "iconType":
				return ec.fieldContext_Device_iconType(ctx, field)
			case "position":
				return ec.fieldContext_Device_position(ctx, field)
			case "specs":
				return ec.fieldContext_Device_specs(ctx, field)
			case "status":
				return ec.fieldContext_Device_status(ctx, field)
			case "progress":
				return ec.fieldContext_Device_progress(ctx, field)
			case "mac":
				return ec.fieldContext_Device_mac(ctx, field)
			case "probeIp":
				return ec.fieldContext_Device_probeIp(ctx, field)
			case "nztpWorkflow":
				return ec.fieldContext_Device_nztpWorkflow(ctx, field)
			case "ipmiAddress":
				return ec.fieldContext_Device_ipmiAddress(ctx, field)
			case "ipmiUsername":
				return ec.fieldContext_Device_ipmiUsername(ctx, field)
			case "hostIp":
				return ec.fieldContext_Device_hostIp(ctx, field)
			case "links":
				return ec.fieldContext_Device_links(ctx, field)
			case "telemetryUrl":
				return ec.fieldContext_Device_telemetryUrl(ctx, field)
			case "connections":
				return ec.fieldContext_Device_connections(ctx, field)
			case "site":
				return ec.fieldContext_Device_site(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_editDevice_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeDevice(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeDevice(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveDevice(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeDevice(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeDevice_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_ipmiCommand(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_ipmiCommand(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().IpmiCommand(rctx, fc.Args["id"].(string), fc.Args["cmd"].(model.IpmiCommand))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_ipmiCommand(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_ipmiCommand_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_deployServiceChain(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_deployServiceChain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeployServiceChain(rctx, fc.Args["name"].(string), fc.Args["blocks"].([]*model.BlockInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ServiceChain)
	fc.Result = res
	return ec.marshalOServiceChain2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServiceChain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_deployServiceChain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ServiceChain_id(ctx, field)
			case "name":
				return ec.fieldContext_ServiceChain_name(ctx, field)
			case "blocks":
				return ec.fieldContext_ServiceChain_blocks(ctx, field)
			case "using":
				return ec.fieldContext_ServiceChain_using(ctx, field)
			case "connections":
				return ec.fieldContext_ServiceChain_connections(ctx, field)
			case "platformKPIs":
				return ec.fieldContext_ServiceChain_platformKPIs(ctx, field)
			case "kpis":
				return ec.fieldContext_ServiceChain_kpis(ctx, field)
			case "servers":
				return ec.fieldContext_ServiceChain_servers(ctx, field)
			case "status":
				return ec.fieldContext_ServiceChain_status(ctx, field)
			case "tenant":
				return ec.fieldContext_ServiceChain_tenant(ctx, field)
			case "owner":
				return ec.fieldContext_ServiceChain_owner(ctx, field)
			case "createdAt":
				return ec.fieldContext_ServiceChain_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceChain", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_deployServiceChain_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_updateServiceChain(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_updateServiceChain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UpdateServiceChain(rctx, fc.Args["id"].(string), fc.Args["name"].(string), fc.Args["blocks"].([]*model.BlockInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ServiceChain)
	fc.Result = res
	return ec.marshalOServiceChain2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServiceChain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_updateServiceChain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ServiceChain_id(ctx, field)
			case "name":
				return ec.fieldContext_ServiceChain_name(ctx, field)
			case "blocks":
				return ec.fieldContext_ServiceChain_blocks(ctx, field)
			case "using":
				return ec.fieldContext_ServiceChain_using(ctx, field)
			case "connections":
				return ec.fieldContext_ServiceChain_connections(ctx, field)
			case "platformKPIs":
				return ec.fieldContext_ServiceChain_platformKPIs(ctx, field)
			case "kpis":
				return ec.fieldContext_ServiceChain_kpis(ctx, field)
			case "servers":
				return ec.fieldContext_ServiceChain_servers(ctx, field)
			case "status":
				return ec.fieldContext_ServiceChain_status(ctx, field)
			case "tenant":
				return ec.fieldContext_ServiceChain_tenant(ctx, field)
			case "owner":
				return ec.fieldContext_ServiceChain_owner(ctx, field)
			case "createdAt":
				return ec.fieldContext_ServiceChain_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceChain", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_updateServiceChain_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeServiceChain(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeServiceChain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveServiceChain(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeServiceChain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeServiceChain_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_provision(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_provision(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Provision(rctx, fc.Args["input"].(model.ProvisionInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_provision(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Device_id(ctx, field)
			case "tags":
				return ec.fieldContext_Device_tags(ctx, field)
			case "parents":
				return ec.fieldContext_Device_parents(ctx, field)
			case "displayName":
				return ec.fieldContext_Device_displayName(ctx, field)
			case "img":
				return ec.fieldContext_Device_img(ctx, field)
			case "iconType":
				return ec.fieldContext_Device_iconType(ctx, field)
			case "position":
				return ec.fieldContext_Device_position(ctx, field)
			case "specs":
				return ec.fieldContext_Device_specs(ctx, field)
			case "status":
				return ec.fieldContext_Device_status(ctx, field)
			case "progress":
				return ec.fieldContext_Device_progress(ctx, field)
			case "mac":
				return ec.fieldContext_Device_mac(ctx, field)
			case "probeIp":
				return ec.fieldContext_Device_probeIp(ctx, field)
			case "nztpWorkflow":
				return ec.fieldContext_Device_nztpWorkflow(ctx, field)
			case "ipmiAddress":
				return ec.fieldContext_Device_ipmiAddress(ctx, field)
			case "ipmiUsername":
				return ec.fieldContext_Device_ipmiUsername(ctx, field)
			case "hostIp":
				return ec.fieldContext_Device_hostIp(ctx, field)
			case "links":
				return ec.fieldContext_Device_links(ctx, field)
			case "telemetryUrl":
				return ec.fieldContext_Device_telemetryUrl(ctx, field)
			case "connections":
				return ec.fieldContext_Device_connections(ctx, field)
			case "site":
				return ec.fieldContext_Device_site(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_provision_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_setDefaultMapPosition(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_setDefaultMapPosition(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SetDefaultMapPosition(rctx, fc.Args["center"].(model.LatLngInput), fc.Args["zoom"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MapSettings)
	fc.Result = res
	return ec.marshalOMapSettings2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐMapSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_setDefaultMapPosition(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "center":
				return ec.fieldContext_MapSettings_center(ctx, field)
			case "zoom":
				return ec.fieldContext_MapSettings_zoom(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MapSettings", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_setDefaultMapPosition_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateSite(rctx, fc.Args["site"].(model.SiteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Site)
	fc.Result = res
	return ec.marshalOSite2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Site_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Site_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Site_description(ctx, field)
			case "ancestors":
				return ec.fieldContext_Site_ancestors(ctx, field)
			case "sites":
				return ec.fieldContext_Site_sites(ctx, field)
			case "devices":
				return ec.fieldContext_Site_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Site", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createSite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_editSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_editSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().EditSite(rctx, fc.Args["id"].(string), fc.Args["site"].(model.SiteInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Site)
	fc.Result = res
	return ec.marshalOSite2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_editSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Site_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Site_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Site_description(ctx, field)
			case "ancestors":
				return ec.fieldContext_Site_ancestors(ctx, field)
			case "sites":
				return ec.fieldContext_Site_sites(ctx, field)
			case "devices":
				return ec.fieldContext_Site_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Site", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_editSite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeSite(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeSite(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveSite(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeSite(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeSite_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_createUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_createUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().CreateUser(rctx, fc.Args["user"].(model.CreateUserInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_createUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "org":
				return ec.fieldContext_User_org(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_createUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Mutation_removeUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Mutation_removeUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RemoveUser(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Mutation_removeUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "org":
				return ec.fieldContext_User_org(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Mutation_removeUser_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _OktoResource_id(ctx context.Context, field graphql.CollectedField, obj *model.OktoResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OktoResource_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OktoResource_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OktoResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OktoResource_name(ctx context.Context, field graphql.CollectedField, obj *model.OktoResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OktoResource_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OktoResource_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OktoResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OktoResource_kind(ctx context.Context, field graphql.CollectedField, obj *model.OktoResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OktoResource_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OktoResource_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OktoResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OktoResource_status(ctx context.Context, field graphql.CollectedField, obj *model.OktoResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OktoResource_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OktoResource_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OktoResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OktoResource_namespace(ctx context.Context, field graphql.CollectedField, obj *model.OktoResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OktoResource_namespace(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Namespace, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OktoResource_namespace(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OktoResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _OktoResource_manifest(ctx context.Context, field graphql.CollectedField, obj *model.OktoResource) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_OktoResource_manifest(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Manifest, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_OktoResource_manifest(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "OktoResource",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Progress_step(ctx context.Context, field graphql.CollectedField, obj *model.Progress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Progress_step(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Step, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Progress_step(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Progress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Progress_goal(ctx context.Context, field graphql.CollectedField, obj *model.Progress) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Progress_goal(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Goal, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Progress_goal(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Progress",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProvisionChart_name(ctx context.Context, field graphql.CollectedField, obj *model.ProvisionChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProvisionChart_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProvisionChart_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProvisionChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProvisionChart_version(ctx context.Context, field graphql.CollectedField, obj *model.ProvisionChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProvisionChart_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Version, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProvisionChart_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProvisionChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProvisionChart_baremetalValues(ctx context.Context, field graphql.CollectedField, obj *model.ProvisionChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProvisionChart_baremetalValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BaremetalValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProvisionChart_baremetalValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProvisionChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ProvisionChart_softwareValues(ctx context.Context, field graphql.CollectedField, obj *model.ProvisionChart) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ProvisionChart_softwareValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SoftwareValues, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ProvisionChart_softwareValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ProvisionChart",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_apiTokens(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_apiTokens(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().APITokens(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.APITokens)
	fc.Result = res
	return ec.marshalOApiTokens2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐAPITokens(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_apiTokens(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ApiTokens_id(ctx, field)
			case "googleMaps":
				return ec.fieldContext_ApiTokens_googleMaps(ctx, field)
			case "mapbox":
				return ec.fieldContext_ApiTokens_mapbox(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ApiTokens", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_connections(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_connections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Connections(rctx, fc.Args["entities"].([]string), fc.Args["kindCatPairs"].([]*model.KindCatPair))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Connection)
	fc.Result = res
	return ec.marshalOConnection2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_connections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Connection_id(ctx, field)
			case "category":
				return ec.fieldContext_Connection_category(ctx, field)
			case "description":
				return ec.fieldContext_Connection_description(ctx, field)
			case "entity":
				return ec.fieldContext_Connection_entity(ctx, field)
			case "kind":
				return ec.fieldContext_Connection_kind(ctx, field)
			case "name":
				return ec.fieldContext_Connection_name(ctx, field)
			case "source":
				return ec.fieldContext_Connection_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Connection", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_connections_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_devices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Devices(rctx, fc.Args["id"].(*string), fc.Args["tags"].([]*model.TagInput), fc.Args["parents"].([]string), fc.Args["bbox"].(*model.BBox), fc.Args["searchTerm"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DevicesResult)
	fc.Result = res
	return ec.marshalODevicesResult2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevicesResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_devices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "devices":
				return ec.fieldContext_DevicesResult_devices(ctx, field)
			case "hits":
				return ec.fieldContext_DevicesResult_hits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DevicesResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_devices_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_nearbyDevices(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_nearbyDevices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().NearbyDevices(rctx, fc.Args["device"].(string), fc.Args["tags"].([]*model.TagInput), fc.Args["radius"].(*float64), fc.Args["latency"].(*float64))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DevicesResult)
	fc.Result = res
	return ec.marshalODevicesResult2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevicesResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_nearbyDevices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "devices":
				return ec.fieldContext_DevicesResult_devices(ctx, field)
			case "hits":
				return ec.fieldContext_DevicesResult_hits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DevicesResult", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_nearbyDevices_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_serviceChain(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_serviceChain(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServiceChain(rctx, fc.Args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ServiceChain)
	fc.Result = res
	return ec.marshalOServiceChain2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServiceChain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_serviceChain(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ServiceChain_id(ctx, field)
			case "name":
				return ec.fieldContext_ServiceChain_name(ctx, field)
			case "blocks":
				return ec.fieldContext_ServiceChain_blocks(ctx, field)
			case "using":
				return ec.fieldContext_ServiceChain_using(ctx, field)
			case "connections":
				return ec.fieldContext_ServiceChain_connections(ctx, field)
			case "platformKPIs":
				return ec.fieldContext_ServiceChain_platformKPIs(ctx, field)
			case "kpis":
				return ec.fieldContext_ServiceChain_kpis(ctx, field)
			case "servers":
				return ec.fieldContext_ServiceChain_servers(ctx, field)
			case "status":
				return ec.fieldContext_ServiceChain_status(ctx, field)
			case "tenant":
				return ec.fieldContext_ServiceChain_tenant(ctx, field)
			case "owner":
				return ec.fieldContext_ServiceChain_owner(ctx, field)
			case "createdAt":
				return ec.fieldContext_ServiceChain_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceChain", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_serviceChain_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_serviceChains(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_serviceChains(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ServiceChains(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ServiceChain)
	fc.Result = res
	return ec.marshalOServiceChain2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServiceChain(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_serviceChains(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_ServiceChain_id(ctx, field)
			case "name":
				return ec.fieldContext_ServiceChain_name(ctx, field)
			case "blocks":
				return ec.fieldContext_ServiceChain_blocks(ctx, field)
			case "using":
				return ec.fieldContext_ServiceChain_using(ctx, field)
			case "connections":
				return ec.fieldContext_ServiceChain_connections(ctx, field)
			case "platformKPIs":
				return ec.fieldContext_ServiceChain_platformKPIs(ctx, field)
			case "kpis":
				return ec.fieldContext_ServiceChain_kpis(ctx, field)
			case "servers":
				return ec.fieldContext_ServiceChain_servers(ctx, field)
			case "status":
				return ec.fieldContext_ServiceChain_status(ctx, field)
			case "tenant":
				return ec.fieldContext_ServiceChain_tenant(ctx, field)
			case "owner":
				return ec.fieldContext_ServiceChain_owner(ctx, field)
			case "createdAt":
				return ec.fieldContext_ServiceChain_createdAt(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ServiceChain", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_blockChart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_blockChart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BlockChart(rctx, fc.Args["name"].(string), fc.Args["version"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.BlockChart)
	fc.Result = res
	return ec.marshalOBlockChart2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockChart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_blockChart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BlockChart_id(ctx, field)
			case "name":
				return ec.fieldContext_BlockChart_name(ctx, field)
			case "version":
				return ec.fieldContext_BlockChart_version(ctx, field)
			case "availableVersions":
				return ec.fieldContext_BlockChart_availableVersions(ctx, field)
			case "categories":
				return ec.fieldContext_BlockChart_categories(ctx, field)
			case "description":
				return ec.fieldContext_BlockChart_description(ctx, field)
			case "chartYaml":
				return ec.fieldContext_BlockChart_chartYaml(ctx, field)
			case "displayName":
				return ec.fieldContext_BlockChart_displayName(ctx, field)
			case "valuesYaml":
				return ec.fieldContext_BlockChart_valuesYaml(ctx, field)
			case "vendor":
				return ec.fieldContext_BlockChart_vendor(ctx, field)
			case "logoUrl":
				return ec.fieldContext_BlockChart_logoUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlockChart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_blockChart_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_blockCharts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_blockCharts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().BlockCharts(rctx, fc.Args["category"].(*string), fc.Args["vendors"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.BlockChart)
	fc.Result = res
	return ec.marshalOBlockChart2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockChart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_blockCharts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_BlockChart_id(ctx, field)
			case "name":
				return ec.fieldContext_BlockChart_name(ctx, field)
			case "version":
				return ec.fieldContext_BlockChart_version(ctx, field)
			case "availableVersions":
				return ec.fieldContext_BlockChart_availableVersions(ctx, field)
			case "categories":
				return ec.fieldContext_BlockChart_categories(ctx, field)
			case "description":
				return ec.fieldContext_BlockChart_description(ctx, field)
			case "chartYaml":
				return ec.fieldContext_BlockChart_chartYaml(ctx, field)
			case "displayName":
				return ec.fieldContext_BlockChart_displayName(ctx, field)
			case "valuesYaml":
				return ec.fieldContext_BlockChart_valuesYaml(ctx, field)
			case "vendor":
				return ec.fieldContext_BlockChart_vendor(ctx, field)
			case "logoUrl":
				return ec.fieldContext_BlockChart_logoUrl(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlockChart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_blockCharts_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_provisionChart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_provisionChart(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProvisionChart(rctx, fc.Args["name"].(string), fc.Args["version"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.ProvisionChart)
	fc.Result = res
	return ec.marshalOProvisionChart2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐProvisionChart(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_provisionChart(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ProvisionChart_name(ctx, field)
			case "version":
				return ec.fieldContext_ProvisionChart_version(ctx, field)
			case "baremetalValues":
				return ec.fieldContext_ProvisionChart_baremetalValues(ctx, field)
			case "softwareValues":
				return ec.fieldContext_ProvisionChart_softwareValues(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ProvisionChart", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_provisionChart_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_provisionCharts(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_provisionCharts(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ProvisionCharts(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.ChartKey)
	fc.Result = res
	return ec.marshalOChartKey2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐChartKey(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_provisionCharts(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_ChartKey_name(ctx, field)
			case "version":
				return ec.fieldContext_ChartKey_version(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type ChartKey", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_settings(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_settings(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Settings(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Settings)
	fc.Result = res
	return ec.marshalOSettings2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_settings(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "map":
				return ec.fieldContext_Settings_map(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Settings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_site(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_site(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Site(rctx, fc.Args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Site)
	fc.Result = res
	return ec.marshalOSite2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_site(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Site_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Site_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Site_description(ctx, field)
			case "ancestors":
				return ec.fieldContext_Site_ancestors(ctx, field)
			case "sites":
				return ec.fieldContext_Site_sites(ctx, field)
			case "devices":
				return ec.fieldContext_Site_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Site", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_site_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_loggedInUser(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_loggedInUser(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().LoggedInUser(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_loggedInUser(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "org":
				return ec.fieldContext_User_org(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_users(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_users(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Users(rctx, fc.Args["org"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.User)
	fc.Result = res
	return ec.marshalOUser2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐUser(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_users(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_User_id(ctx, field)
			case "name":
				return ec.fieldContext_User_name(ctx, field)
			case "email":
				return ec.fieldContext_User_email(ctx, field)
			case "org":
				return ec.fieldContext_User_org(ctx, field)
			case "role":
				return ec.fieldContext_User_role(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type User", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_users_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query_version(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_version(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Version(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_version(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Query_oktoResource(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query_oktoResource(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().OktoResource(rctx, fc.Args["name"].(string), fc.Args["kind"].(string), fc.Args["namespace"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.OktoResource)
	fc.Result = res
	return ec.marshalOOktoResource2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐOktoResource(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query_oktoResource(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: true,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_OktoResource_id(ctx, field)
			case "name":
				return ec.fieldContext_OktoResource_name(ctx, field)
			case "kind":
				return ec.fieldContext_OktoResource_kind(ctx, field)
			case "status":
				return ec.fieldContext_OktoResource_status(ctx, field)
			case "namespace":
				return ec.fieldContext_OktoResource_namespace(ctx, field)
			case "manifest":
				return ec.fieldContext_OktoResource_manifest(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type OktoResource", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query_oktoResource_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(fc.Args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field_Query___type_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Query___schema(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Query___schema(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "description":
				return ec.fieldContext___Schema_description(ctx, field)
			case "types":
				return ec.fieldContext___Schema_types(ctx, field)
			case "queryType":
				return ec.fieldContext___Schema_queryType(ctx, field)
			case "mutationType":
				return ec.fieldContext___Schema_mutationType(ctx, field)
			case "subscriptionType":
				return ec.fieldContext___Schema_subscriptionType(ctx, field)
			case "directives":
				return ec.fieldContext___Schema_directives(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Schema", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Server_diagramNode(ctx context.Context, field graphql.CollectedField, obj *model.Server) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Server_diagramNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramNode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Server_diagramNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Server",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Server_device(ctx context.Context, field graphql.CollectedField, obj *model.Server) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Server_device(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Device, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Device)
	fc.Result = res
	return ec.marshalODevice2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevice(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Server_device(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Server",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Device_id(ctx, field)
			case "tags":
				return ec.fieldContext_Device_tags(ctx, field)
			case "parents":
				return ec.fieldContext_Device_parents(ctx, field)
			case "displayName":
				return ec.fieldContext_Device_displayName(ctx, field)
			case "img":
				return ec.fieldContext_Device_img(ctx, field)
			case "iconType":
				return ec.fieldContext_Device_iconType(ctx, field)
			case "position":
				return ec.fieldContext_Device_position(ctx, field)
			case "specs":
				return ec.fieldContext_Device_specs(ctx, field)
			case "status":
				return ec.fieldContext_Device_status(ctx, field)
			case "progress":
				return ec.fieldContext_Device_progress(ctx, field)
			case "mac":
				return ec.fieldContext_Device_mac(ctx, field)
			case "probeIp":
				return ec.fieldContext_Device_probeIp(ctx, field)
			case "nztpWorkflow":
				return ec.fieldContext_Device_nztpWorkflow(ctx, field)
			case "ipmiAddress":
				return ec.fieldContext_Device_ipmiAddress(ctx, field)
			case "ipmiUsername":
				return ec.fieldContext_Device_ipmiUsername(ctx, field)
			case "hostIp":
				return ec.fieldContext_Device_hostIp(ctx, field)
			case "links":
				return ec.fieldContext_Device_links(ctx, field)
			case "telemetryUrl":
				return ec.fieldContext_Device_telemetryUrl(ctx, field)
			case "connections":
				return ec.fieldContext_Device_connections(ctx, field)
			case "site":
				return ec.fieldContext_Device_site(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Device", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Server_pinned(ctx context.Context, field graphql.CollectedField, obj *model.Server) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Server_pinned(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Pinned, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Server_pinned(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Server",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_id(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_diagramNode(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_diagramNode(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DiagramNode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_diagramNode(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_name(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_using(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_using(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Using, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Dependencies)
	fc.Result = res
	return ec.marshalODependencies2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDependencies(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_using(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "services":
				return ec.fieldContext_Dependencies_services(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Dependencies", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_connections(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_connections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Connection)
	fc.Result = res
	return ec.marshalOConnection2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_connections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Connection_id(ctx, field)
			case "category":
				return ec.fieldContext_Connection_category(ctx, field)
			case "description":
				return ec.fieldContext_Connection_description(ctx, field)
			case "entity":
				return ec.fieldContext_Connection_entity(ctx, field)
			case "kind":
				return ec.fieldContext_Connection_kind(ctx, field)
			case "name":
				return ec.fieldContext_Connection_name(ctx, field)
			case "source":
				return ec.fieldContext_Connection_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Connection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_platformKPIs(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_platformKPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlatformKPIs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Kpi)
	fc.Result = res
	return ec.marshalOKPI2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKpi(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_platformKPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_KPI_name(ctx, field)
			case "type":
				return ec.fieldContext_KPI_type(ctx, field)
			case "value":
				return ec.fieldContext_KPI_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KPI", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_kpis(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_kpis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kpis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Kpi)
	fc.Result = res
	return ec.marshalOKPI2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKpi(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_kpis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_KPI_name(ctx, field)
			case "type":
				return ec.fieldContext_KPI_type(ctx, field)
			case "value":
				return ec.fieldContext_KPI_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KPI", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_status(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_fields(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.FieldParam)
	fc.Result = res
	return ec.marshalOFieldParam2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐFieldParamᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_FieldParam_name(ctx, field)
			case "value":
				return ec.fieldContext_FieldParam_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type FieldParam", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_tenant(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_tenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_tenant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_owner(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Service_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.Service) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Service_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Service_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Service",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_id(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_name(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_blocks(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_blocks(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Blocks, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Block)
	fc.Result = res
	return ec.marshalOBlock2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_blocks(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Block_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Block_displayName(ctx, field)
			case "values":
				return ec.fieldContext_Block_values(ctx, field)
			case "selectedVersion":
				return ec.fieldContext_Block_selectedVersion(ctx, field)
			case "chart":
				return ec.fieldContext_Block_chart(ctx, field)
			case "status":
				return ec.fieldContext_Block_status(ctx, field)
			case "connections":
				return ec.fieldContext_Block_connections(ctx, field)
			case "resources":
				return ec.fieldContext_Block_resources(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Block", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_using(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_using(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Using, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Dependencies)
	fc.Result = res
	return ec.marshalODependencies2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDependencies(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_using(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "services":
				return ec.fieldContext_Dependencies_services(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Dependencies", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_connections(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_connections(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Connections, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Connection)
	fc.Result = res
	return ec.marshalOConnection2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnection(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_connections(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Connection_id(ctx, field)
			case "category":
				return ec.fieldContext_Connection_category(ctx, field)
			case "description":
				return ec.fieldContext_Connection_description(ctx, field)
			case "entity":
				return ec.fieldContext_Connection_entity(ctx, field)
			case "kind":
				return ec.fieldContext_Connection_kind(ctx, field)
			case "name":
				return ec.fieldContext_Connection_name(ctx, field)
			case "source":
				return ec.fieldContext_Connection_source(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Connection", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_platformKPIs(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_platformKPIs(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PlatformKPIs, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Kpi)
	fc.Result = res
	return ec.marshalOKPI2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKpi(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_platformKPIs(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_KPI_name(ctx, field)
			case "type":
				return ec.fieldContext_KPI_type(ctx, field)
			case "value":
				return ec.fieldContext_KPI_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KPI", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_kpis(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_kpis(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kpis, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Kpi)
	fc.Result = res
	return ec.marshalOKPI2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKpi(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_kpis(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext_KPI_name(ctx, field)
			case "type":
				return ec.fieldContext_KPI_type(ctx, field)
			case "value":
				return ec.fieldContext_KPI_value(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type KPI", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_servers(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_servers(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Servers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Server)
	fc.Result = res
	return ec.marshalOServer2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServer(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_servers(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "diagramNode":
				return ec.fieldContext_Server_diagramNode(ctx, field)
			case "device":
				return ec.fieldContext_Server_device(ctx, field)
			case "pinned":
				return ec.fieldContext_Server_pinned(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Server", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_status(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Status)
	fc.Result = res
	return ec.marshalOStatus2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Status does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_tenant(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_tenant(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tenant, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_tenant(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_owner(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_owner(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Owner, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_owner(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceChain_createdAt(ctx context.Context, field graphql.CollectedField, obj *model.ServiceChain) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceChain_createdAt(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*time.Time)
	fc.Result = res
	return ec.marshalOTime2ᚖtimeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceChain_createdAt(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceChain",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceParam_name(ctx context.Context, field graphql.CollectedField, obj *model.ServiceParam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceParam_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceParam_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceParam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _ServiceParam_type(ctx context.Context, field graphql.CollectedField, obj *model.ServiceParam) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_ServiceParam_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_ServiceParam_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "ServiceParam",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Settings_map(ctx context.Context, field graphql.CollectedField, obj *model.Settings) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Settings_map(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Map, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.MapSettings)
	fc.Result = res
	return ec.marshalOMapSettings2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐMapSettings(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Settings_map(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Settings",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "center":
				return ec.fieldContext_MapSettings_center(ctx, field)
			case "zoom":
				return ec.fieldContext_MapSettings_zoom(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type MapSettings", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Site_id(ctx context.Context, field graphql.CollectedField, obj *model.Site) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Site_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Site_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Site",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Site_displayName(ctx context.Context, field graphql.CollectedField, obj *model.Site) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Site_displayName(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Site_displayName(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Site",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Site_description(ctx context.Context, field graphql.CollectedField, obj *model.Site) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Site_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Site_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Site",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Site_ancestors(ctx context.Context, field graphql.CollectedField, obj *model.Site) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Site_ancestors(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Ancestors, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Site)
	fc.Result = res
	return ec.marshalOSite2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Site_ancestors(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Site",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Site_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Site_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Site_description(ctx, field)
			case "ancestors":
				return ec.fieldContext_Site_ancestors(ctx, field)
			case "sites":
				return ec.fieldContext_Site_sites(ctx, field)
			case "devices":
				return ec.fieldContext_Site_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Site", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Site_sites(ctx context.Context, field graphql.CollectedField, obj *model.Site) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Site_sites(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sites, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*model.Site)
	fc.Result = res
	return ec.marshalOSite2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Site_sites(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Site",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Site_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Site_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Site_description(ctx, field)
			case "ancestors":
				return ec.fieldContext_Site_ancestors(ctx, field)
			case "sites":
				return ec.fieldContext_Site_sites(ctx, field)
			case "devices":
				return ec.fieldContext_Site_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Site", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Site_devices(ctx context.Context, field graphql.CollectedField, obj *model.Site) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Site_devices(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Devices, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.DevicesResult)
	fc.Result = res
	return ec.marshalODevicesResult2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevicesResult(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Site_devices(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Site",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "devices":
				return ec.fieldContext_DevicesResult_devices(ctx, field)
			case "hits":
				return ec.fieldContext_DevicesResult_hits(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type DevicesResult", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_key(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_key(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Key, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_key(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Tag_inc(ctx context.Context, field graphql.CollectedField, obj *model.Tag) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Tag_inc(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Inc, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Tag_inc(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Tag",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_id(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_name(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_email(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_email(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_email(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_org(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_org(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Org, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Site)
	fc.Result = res
	return ec.marshalOSite2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSite(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_org(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Site_id(ctx, field)
			case "displayName":
				return ec.fieldContext_Site_displayName(ctx, field)
			case "description":
				return ec.fieldContext_Site_description(ctx, field)
			case "ancestors":
				return ec.fieldContext_Site_ancestors(ctx, field)
			case "sites":
				return ec.fieldContext_Site_sites(ctx, field)
			case "devices":
				return ec.fieldContext_Site_devices(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Site", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _User_role(ctx context.Context, field graphql.CollectedField, obj *model.User) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_User_role(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Role, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*model.Role)
	fc.Result = res
	return ec.marshalORole2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐRole(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_User_role(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "User",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Role does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_locations(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_locations(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __DirectiveLocation does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Directive_isRepeatable(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsRepeatable, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Directive_isRepeatable(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___EnumValue_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_args(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_args(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_isDeprecated(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_isDeprecated(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Field_deprecationReason(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Field_deprecationReason(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_type(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_type(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___InputValue_defaultValue(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_types(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_types(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_queryType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_queryType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_mutationType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_mutationType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_subscriptionType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Schema_directives(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Schema_directives(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Directive_name(ctx, field)
			case "description":
				return ec.fieldContext___Directive_description(ctx, field)
			case "locations":
				return ec.fieldContext___Directive_locations(ctx, field)
			case "args":
				return ec.fieldContext___Directive_args(ctx, field)
			case "isRepeatable":
				return ec.fieldContext___Directive_isRepeatable(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Directive", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_kind(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_kind(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type __TypeKind does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_name(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_name(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_description(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_description(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_fields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_fields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___Field_name(ctx, field)
			case "description":
				return ec.fieldContext___Field_description(ctx, field)
			case "args":
				return ec.fieldContext___Field_args(ctx, field)
			case "type":
				return ec.fieldContext___Field_type(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___Field_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___Field_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Field", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_fields_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_interfaces(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_interfaces(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_possibleTypes(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_possibleTypes(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_enumValues(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(fc.Args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_enumValues(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___EnumValue_name(ctx, field)
			case "description":
				return ec.fieldContext___EnumValue_description(ctx, field)
			case "isDeprecated":
				return ec.fieldContext___EnumValue_isDeprecated(ctx, field)
			case "deprecationReason":
				return ec.fieldContext___EnumValue_deprecationReason(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __EnumValue", field.Name)
		},
	}
	defer func() {
		if r := recover(); r != nil {
			err = ec.Recover(ctx, r)
			ec.Error(ctx, err)
		}
	}()
	ctx = graphql.WithFieldContext(ctx, fc)
	if fc.Args, err = ec.field___Type_enumValues_args(ctx, field.ArgumentMap(ec.Variables)); err != nil {
		ec.Error(ctx, err)
		return
	}
	return fc, nil
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_inputFields(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_inputFields(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "name":
				return ec.fieldContext___InputValue_name(ctx, field)
			case "description":
				return ec.fieldContext___InputValue_description(ctx, field)
			case "type":
				return ec.fieldContext___InputValue_type(ctx, field)
			case "defaultValue":
				return ec.fieldContext___InputValue_defaultValue(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __InputValue", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_ofType(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_ofType(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "kind":
				return ec.fieldContext___Type_kind(ctx, field)
			case "name":
				return ec.fieldContext___Type_name(ctx, field)
			case "description":
				return ec.fieldContext___Type_description(ctx, field)
			case "fields":
				return ec.fieldContext___Type_fields(ctx, field)
			case "interfaces":
				return ec.fieldContext___Type_interfaces(ctx, field)
			case "possibleTypes":
				return ec.fieldContext___Type_possibleTypes(ctx, field)
			case "enumValues":
				return ec.fieldContext___Type_enumValues(ctx, field)
			case "inputFields":
				return ec.fieldContext___Type_inputFields(ctx, field)
			case "ofType":
				return ec.fieldContext___Type_ofType(ctx, field)
			case "specifiedByURL":
				return ec.fieldContext___Type_specifiedByURL(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type __Type", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) ___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext___Type_specifiedByURL(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SpecifiedByURL(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext___Type_specifiedByURL(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		IsMethod:   true,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBBox(ctx context.Context, obj interface{}) (model.BBox, error) {
	var it model.BBox
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "nw":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nw"))
			it.Nw, err = ec.unmarshalNLatLngInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLngInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "se":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("se"))
			it.Se, err = ec.unmarshalNLatLngInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLngInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlockConnectionInput(ctx context.Context, obj interface{}) (model.BlockConnectionInput, error) {
	var it model.BlockConnectionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "connId":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connId"))
			it.ConnID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlockInput(ctx context.Context, obj interface{}) (model.BlockInput, error) {
	var it model.BlockInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockChartName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockChartName"))
			it.BlockChartName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockChartVersion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockChartVersion"))
			it.BlockChartVersion, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "values":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("values"))
			it.Values, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputConnectionInput(ctx context.Context, obj interface{}) (model.ConnectionInput, error) {
	var it model.ConnectionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputCreateUserInput(ctx context.Context, obj interface{}) (model.CreateUserInput, error) {
	var it model.CreateUserInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "org":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("org"))
			it.Org, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "role":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("role"))
			it.Role, err = ec.unmarshalNRole2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐRole(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeployTargetInput(ctx context.Context, obj interface{}) (model.DeployTargetInput, error) {
	var it model.DeployTargetInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "master":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("master"))
			it.Master, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "host":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("host"))
			it.Host, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputDeviceInput(ctx context.Context, obj interface{}) (model.DeviceInput, error) {
	var it model.DeviceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "connections":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connections"))
			it.Connections, err = ec.unmarshalOConnectionInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnectionInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parents":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parents"))
			it.Parents, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "img":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("img"))
			it.Img, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "iconType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("iconType"))
			it.IconType, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "kubeconfig":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kubeconfig"))
			it.Kubeconfig, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			it.Position, err = ec.unmarshalOLatLngInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLngInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "mac":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("mac"))
			it.Mac, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "probeIp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("probeIp"))
			it.ProbeIP, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nztpServer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nztpServer"))
			it.NztpServer, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nztpWorkflow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nztpWorkflow"))
			it.NztpWorkflow, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ipmiAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipmiAddress"))
			it.IpmiAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ipmiUsername":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipmiUsername"))
			it.IpmiUsername, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ipmiPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipmiPassword"))
			it.IpmiPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "site":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("site"))
			it.Site, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditConnectionInput(ctx context.Context, obj interface{}) (model.EditConnectionInput, error) {
	var it model.EditConnectionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "source":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("source"))
			it.Source, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEditDeviceInput(ctx context.Context, obj interface{}) (model.EditDeviceInput, error) {
	var it model.EditDeviceInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "tags":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("tags"))
			it.Tags, err = ec.unmarshalOString2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			it.Position, err = ec.unmarshalOLatLngInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLngInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "nztpWorkflow":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nztpWorkflow"))
			it.NztpWorkflow, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "nztpProvision":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nztpProvision"))
			it.NztpProvision, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		case "ipmiAddress":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipmiAddress"))
			it.IpmiAddress, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ipmiUsername":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipmiUsername"))
			it.IpmiUsername, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ipmiPassword":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ipmiPassword"))
			it.IpmiPassword, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "connections":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("connections"))
			it.Connections, err = ec.unmarshalOEditConnectionInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐEditConnectionInputᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "deletedConnections":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("deletedConnections"))
			it.DeletedConnections, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		case "site":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("site"))
			it.Site, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputKindCatPair(ctx context.Context, obj interface{}) (model.KindCatPair, error) {
	var it model.KindCatPair
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "category":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("category"))
			it.Category, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "kind":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("kind"))
			it.Kind, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputLatLngInput(ctx context.Context, obj interface{}) (model.LatLngInput, error) {
	var it model.LatLngInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "lat":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lat"))
			it.Lat, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		case "lng":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("lng"))
			it.Lng, err = ec.unmarshalNFloat2float64(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputProvisionInput(ctx context.Context, obj interface{}) (model.ProvisionInput, error) {
	var it model.ProvisionInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "chartName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chartName"))
			it.ChartName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "chartVersion":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("chartVersion"))
			it.ChartVersion, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "provisionerSite":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provisionerSite"))
			it.ProvisionerSite, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "provisionInventory":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provisionInventory"))
			it.ProvisionInventory, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "position":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("position"))
			it.Position, err = ec.unmarshalNLatLngInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLngInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "site":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("site"))
			it.Site, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputServerInput(ctx context.Context, obj interface{}) (model.ServerInput, error) {
	var it model.ServerInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "diagramNode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("diagramNode"))
			it.DiagramNode, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "device":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("device"))
			it.Device, err = ec.unmarshalNID2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "pinned":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("pinned"))
			it.Pinned, err = ec.unmarshalOBoolean2ᚖbool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputSiteInput(ctx context.Context, obj interface{}) (model.SiteInput, error) {
	var it model.SiteInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "displayName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("displayName"))
			it.DisplayName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "description":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("description"))
			it.Description, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "ancestors":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ancestors"))
			it.Ancestors, err = ec.unmarshalOID2ᚕstringᚄ(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputTagInput(ctx context.Context, obj interface{}) (model.TagInput, error) {
	var it model.TagInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "key":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("key"))
			it.Key, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "inc":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("inc"))
			it.Inc, err = ec.unmarshalNBoolean2bool(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var apiTokensImplementors = []string{"ApiTokens"}

func (ec *executionContext) _ApiTokens(ctx context.Context, sel ast.SelectionSet, obj *model.APITokens) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, apiTokensImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ApiTokens")
		case "id":

			out.Values[i] = ec._ApiTokens_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "googleMaps":

			out.Values[i] = ec._ApiTokens_googleMaps(ctx, field, obj)

		case "mapbox":

			out.Values[i] = ec._ApiTokens_mapbox(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blockImplementors = []string{"Block"}

func (ec *executionContext) _Block(ctx context.Context, sel ast.SelectionSet, obj *model.Block) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blockImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Block")
		case "id":

			out.Values[i] = ec._Block_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._Block_displayName(ctx, field, obj)

		case "values":

			out.Values[i] = ec._Block_values(ctx, field, obj)

		case "selectedVersion":

			out.Values[i] = ec._Block_selectedVersion(ctx, field, obj)

		case "chart":

			out.Values[i] = ec._Block_chart(ctx, field, obj)

		case "status":

			out.Values[i] = ec._Block_status(ctx, field, obj)

		case "connections":

			out.Values[i] = ec._Block_connections(ctx, field, obj)

		case "resources":

			out.Values[i] = ec._Block_resources(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blockChartImplementors = []string{"BlockChart"}

func (ec *executionContext) _BlockChart(ctx context.Context, sel ast.SelectionSet, obj *model.BlockChart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blockChartImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlockChart")
		case "id":

			out.Values[i] = ec._BlockChart_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._BlockChart_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":

			out.Values[i] = ec._BlockChart_version(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "availableVersions":

			out.Values[i] = ec._BlockChart_availableVersions(ctx, field, obj)

		case "categories":

			out.Values[i] = ec._BlockChart_categories(ctx, field, obj)

		case "description":

			out.Values[i] = ec._BlockChart_description(ctx, field, obj)

		case "chartYaml":

			out.Values[i] = ec._BlockChart_chartYaml(ctx, field, obj)

		case "displayName":

			out.Values[i] = ec._BlockChart_displayName(ctx, field, obj)

		case "valuesYaml":

			out.Values[i] = ec._BlockChart_valuesYaml(ctx, field, obj)

		case "vendor":

			out.Values[i] = ec._BlockChart_vendor(ctx, field, obj)

		case "logoUrl":

			out.Values[i] = ec._BlockChart_logoUrl(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var chartKeyImplementors = []string{"ChartKey"}

func (ec *executionContext) _ChartKey(ctx context.Context, sel ast.SelectionSet, obj *model.ChartKey) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, chartKeyImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ChartKey")
		case "name":

			out.Values[i] = ec._ChartKey_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":

			out.Values[i] = ec._ChartKey_version(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var connectionImplementors = []string{"Connection"}

func (ec *executionContext) _Connection(ctx context.Context, sel ast.SelectionSet, obj *model.Connection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Connection")
		case "id":

			out.Values[i] = ec._Connection_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "category":

			out.Values[i] = ec._Connection_category(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec._Connection_description(ctx, field, obj)

		case "entity":

			out.Values[i] = ec._Connection_entity(ctx, field, obj)

		case "kind":

			out.Values[i] = ec._Connection_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._Connection_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "source":

			out.Values[i] = ec._Connection_source(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var connectionEntityImplementors = []string{"ConnectionEntity"}

func (ec *executionContext) _ConnectionEntity(ctx context.Context, sel ast.SelectionSet, obj *model.ConnectionEntity) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, connectionEntityImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ConnectionEntity")
		case "id":

			out.Values[i] = ec._ConnectionEntity_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._ConnectionEntity_type(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dependenciesImplementors = []string{"Dependencies"}

func (ec *executionContext) _Dependencies(ctx context.Context, sel ast.SelectionSet, obj *model.Dependencies) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dependenciesImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Dependencies")
		case "services":

			out.Values[i] = ec._Dependencies_services(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deviceImplementors = []string{"Device"}

func (ec *executionContext) _Device(ctx context.Context, sel ast.SelectionSet, obj *model.Device) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Device")
		case "id":

			out.Values[i] = ec._Device_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tags":

			out.Values[i] = ec._Device_tags(ctx, field, obj)

		case "parents":

			out.Values[i] = ec._Device_parents(ctx, field, obj)

		case "displayName":

			out.Values[i] = ec._Device_displayName(ctx, field, obj)

		case "img":

			out.Values[i] = ec._Device_img(ctx, field, obj)

		case "iconType":

			out.Values[i] = ec._Device_iconType(ctx, field, obj)

		case "position":

			out.Values[i] = ec._Device_position(ctx, field, obj)

		case "specs":

			out.Values[i] = ec._Device_specs(ctx, field, obj)

		case "status":

			out.Values[i] = ec._Device_status(ctx, field, obj)

		case "progress":

			out.Values[i] = ec._Device_progress(ctx, field, obj)

		case "mac":

			out.Values[i] = ec._Device_mac(ctx, field, obj)

		case "probeIp":

			out.Values[i] = ec._Device_probeIp(ctx, field, obj)

		case "nztpWorkflow":

			out.Values[i] = ec._Device_nztpWorkflow(ctx, field, obj)

		case "ipmiAddress":

			out.Values[i] = ec._Device_ipmiAddress(ctx, field, obj)

		case "ipmiUsername":

			out.Values[i] = ec._Device_ipmiUsername(ctx, field, obj)

		case "hostIp":

			out.Values[i] = ec._Device_hostIp(ctx, field, obj)

		case "links":

			out.Values[i] = ec._Device_links(ctx, field, obj)

		case "telemetryUrl":

			out.Values[i] = ec._Device_telemetryUrl(ctx, field, obj)

		case "connections":

			out.Values[i] = ec._Device_connections(ctx, field, obj)

		case "site":

			out.Values[i] = ec._Device_site(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var deviceLinkImplementors = []string{"DeviceLink"}

func (ec *executionContext) _DeviceLink(ctx context.Context, sel ast.SelectionSet, obj *model.DeviceLink) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, deviceLinkImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DeviceLink")
		case "id":

			out.Values[i] = ec._DeviceLink_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "device":

			out.Values[i] = ec._DeviceLink_device(ctx, field, obj)

		case "status":

			out.Values[i] = ec._DeviceLink_status(ctx, field, obj)

		case "metrics":

			out.Values[i] = ec._DeviceLink_metrics(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var devicesResultImplementors = []string{"DevicesResult"}

func (ec *executionContext) _DevicesResult(ctx context.Context, sel ast.SelectionSet, obj *model.DevicesResult) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, devicesResultImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("DevicesResult")
		case "devices":

			out.Values[i] = ec._DevicesResult_devices(ctx, field, obj)

		case "hits":

			out.Values[i] = ec._DevicesResult_hits(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var fieldParamImplementors = []string{"FieldParam"}

func (ec *executionContext) _FieldParam(ctx context.Context, sel ast.SelectionSet, obj *model.FieldParam) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, fieldParamImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FieldParam")
		case "name":

			out.Values[i] = ec._FieldParam_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._FieldParam_value(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var kPIImplementors = []string{"KPI"}

func (ec *executionContext) _KPI(ctx context.Context, sel ast.SelectionSet, obj *model.Kpi) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, kPIImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("KPI")
		case "name":

			out.Values[i] = ec._KPI_name(ctx, field, obj)

		case "type":

			out.Values[i] = ec._KPI_type(ctx, field, obj)

		case "value":

			out.Values[i] = ec._KPI_value(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var latLngImplementors = []string{"LatLng"}

func (ec *executionContext) _LatLng(ctx context.Context, sel ast.SelectionSet, obj *model.LatLng) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, latLngImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("LatLng")
		case "lat":

			out.Values[i] = ec._LatLng_lat(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "lng":

			out.Values[i] = ec._LatLng_lng(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mapSettingsImplementors = []string{"MapSettings"}

func (ec *executionContext) _MapSettings(ctx context.Context, sel ast.SelectionSet, obj *model.MapSettings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mapSettingsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("MapSettings")
		case "center":

			out.Values[i] = ec._MapSettings_center(ctx, field, obj)

		case "zoom":

			out.Values[i] = ec._MapSettings_zoom(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var metricImplementors = []string{"Metric"}

func (ec *executionContext) _Metric(ctx context.Context, sel ast.SelectionSet, obj *model.Metric) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, metricImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Metric")
		case "dimension":

			out.Values[i] = ec._Metric_dimension(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "value":

			out.Values[i] = ec._Metric_value(ctx, field, obj)

		case "timestamp":

			out.Values[i] = ec._Metric_timestamp(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "device":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_device(ctx, field)
			})

		case "editDevice":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_editDevice(ctx, field)
			})

		case "removeDevice":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeDevice(ctx, field)
			})

		case "ipmiCommand":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_ipmiCommand(ctx, field)
			})

		case "deployServiceChain":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_deployServiceChain(ctx, field)
			})

		case "updateServiceChain":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_updateServiceChain(ctx, field)
			})

		case "removeServiceChain":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeServiceChain(ctx, field)
			})

		case "provision":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_provision(ctx, field)
			})

		case "setDefaultMapPosition":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_setDefaultMapPosition(ctx, field)
			})

		case "createSite":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createSite(ctx, field)
			})

		case "editSite":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_editSite(ctx, field)
			})

		case "removeSite":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeSite(ctx, field)
			})

		case "createUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_createUser(ctx, field)
			})

		case "removeUser":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Mutation_removeUser(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var oktoResourceImplementors = []string{"OktoResource"}

func (ec *executionContext) _OktoResource(ctx context.Context, sel ast.SelectionSet, obj *model.OktoResource) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, oktoResourceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("OktoResource")
		case "id":

			out.Values[i] = ec._OktoResource_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._OktoResource_name(ctx, field, obj)

		case "kind":

			out.Values[i] = ec._OktoResource_kind(ctx, field, obj)

		case "status":

			out.Values[i] = ec._OktoResource_status(ctx, field, obj)

		case "namespace":

			out.Values[i] = ec._OktoResource_namespace(ctx, field, obj)

		case "manifest":

			out.Values[i] = ec._OktoResource_manifest(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var progressImplementors = []string{"Progress"}

func (ec *executionContext) _Progress(ctx context.Context, sel ast.SelectionSet, obj *model.Progress) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, progressImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Progress")
		case "step":

			out.Values[i] = ec._Progress_step(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "goal":

			out.Values[i] = ec._Progress_goal(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var provisionChartImplementors = []string{"ProvisionChart"}

func (ec *executionContext) _ProvisionChart(ctx context.Context, sel ast.SelectionSet, obj *model.ProvisionChart) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, provisionChartImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ProvisionChart")
		case "name":

			out.Values[i] = ec._ProvisionChart_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "version":

			out.Values[i] = ec._ProvisionChart_version(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "baremetalValues":

			out.Values[i] = ec._ProvisionChart_baremetalValues(ctx, field, obj)

		case "softwareValues":

			out.Values[i] = ec._ProvisionChart_softwareValues(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)
	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		innerCtx := graphql.WithRootFieldContext(ctx, &graphql.RootFieldContext{
			Object: field.Name,
			Field:  field,
		})

		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "apiTokens":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_apiTokens(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "connections":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_connections(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "devices":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_devices(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "nearbyDevices":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_nearbyDevices(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "serviceChain":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serviceChain(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "serviceChains":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_serviceChains(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "blockChart":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_blockChart(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "blockCharts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_blockCharts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "provisionChart":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_provisionChart(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "provisionCharts":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_provisionCharts(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "settings":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_settings(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "site":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_site(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "loggedInUser":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_loggedInUser(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "users":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_users(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "version":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_version(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "oktoResource":
			field := field

			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_oktoResource(ctx, field)
				return res
			}

			rrm := func(ctx context.Context) graphql.Marshaler {
				return ec.OperationContext.RootResolverMiddleware(ctx, innerFunc)
			}

			out.Concurrently(i, func() graphql.Marshaler {
				return rrm(innerCtx)
			})
		case "__type":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___type(ctx, field)
			})

		case "__schema":

			out.Values[i] = ec.OperationContext.RootResolverMiddleware(innerCtx, func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Query___schema(ctx, field)
			})

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serverImplementors = []string{"Server"}

func (ec *executionContext) _Server(ctx context.Context, sel ast.SelectionSet, obj *model.Server) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serverImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Server")
		case "diagramNode":

			out.Values[i] = ec._Server_diagramNode(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "device":

			out.Values[i] = ec._Server_device(ctx, field, obj)

		case "pinned":

			out.Values[i] = ec._Server_pinned(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceImplementors = []string{"Service"}

func (ec *executionContext) _Service(ctx context.Context, sel ast.SelectionSet, obj *model.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Service")
		case "id":

			out.Values[i] = ec._Service_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "diagramNode":

			out.Values[i] = ec._Service_diagramNode(ctx, field, obj)

		case "name":

			out.Values[i] = ec._Service_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "using":

			out.Values[i] = ec._Service_using(ctx, field, obj)

		case "connections":

			out.Values[i] = ec._Service_connections(ctx, field, obj)

		case "platformKPIs":

			out.Values[i] = ec._Service_platformKPIs(ctx, field, obj)

		case "kpis":

			out.Values[i] = ec._Service_kpis(ctx, field, obj)

		case "status":

			out.Values[i] = ec._Service_status(ctx, field, obj)

		case "fields":

			out.Values[i] = ec._Service_fields(ctx, field, obj)

		case "tenant":

			out.Values[i] = ec._Service_tenant(ctx, field, obj)

		case "owner":

			out.Values[i] = ec._Service_owner(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._Service_createdAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceChainImplementors = []string{"ServiceChain"}

func (ec *executionContext) _ServiceChain(ctx context.Context, sel ast.SelectionSet, obj *model.ServiceChain) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceChainImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceChain")
		case "id":

			out.Values[i] = ec._ServiceChain_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._ServiceChain_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blocks":

			out.Values[i] = ec._ServiceChain_blocks(ctx, field, obj)

		case "using":

			out.Values[i] = ec._ServiceChain_using(ctx, field, obj)

		case "connections":

			out.Values[i] = ec._ServiceChain_connections(ctx, field, obj)

		case "platformKPIs":

			out.Values[i] = ec._ServiceChain_platformKPIs(ctx, field, obj)

		case "kpis":

			out.Values[i] = ec._ServiceChain_kpis(ctx, field, obj)

		case "servers":

			out.Values[i] = ec._ServiceChain_servers(ctx, field, obj)

		case "status":

			out.Values[i] = ec._ServiceChain_status(ctx, field, obj)

		case "tenant":

			out.Values[i] = ec._ServiceChain_tenant(ctx, field, obj)

		case "owner":

			out.Values[i] = ec._ServiceChain_owner(ctx, field, obj)

		case "createdAt":

			out.Values[i] = ec._ServiceChain_createdAt(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var serviceParamImplementors = []string{"ServiceParam"}

func (ec *executionContext) _ServiceParam(ctx context.Context, sel ast.SelectionSet, obj *model.ServiceParam) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, serviceParamImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("ServiceParam")
		case "name":

			out.Values[i] = ec._ServiceParam_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec._ServiceParam_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var settingsImplementors = []string{"Settings"}

func (ec *executionContext) _Settings(ctx context.Context, sel ast.SelectionSet, obj *model.Settings) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, settingsImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Settings")
		case "map":

			out.Values[i] = ec._Settings_map(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var siteImplementors = []string{"Site"}

func (ec *executionContext) _Site(ctx context.Context, sel ast.SelectionSet, obj *model.Site) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, siteImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Site")
		case "id":

			out.Values[i] = ec._Site_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":

			out.Values[i] = ec._Site_displayName(ctx, field, obj)

		case "description":

			out.Values[i] = ec._Site_description(ctx, field, obj)

		case "ancestors":

			out.Values[i] = ec._Site_ancestors(ctx, field, obj)

		case "sites":

			out.Values[i] = ec._Site_sites(ctx, field, obj)

		case "devices":

			out.Values[i] = ec._Site_devices(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var tagImplementors = []string{"Tag"}

func (ec *executionContext) _Tag(ctx context.Context, sel ast.SelectionSet, obj *model.Tag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, tagImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Tag")
		case "key":

			out.Values[i] = ec._Tag_key(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "inc":

			out.Values[i] = ec._Tag_inc(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var userImplementors = []string{"User"}

func (ec *executionContext) _User(ctx context.Context, sel ast.SelectionSet, obj *model.User) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, userImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("User")
		case "id":

			out.Values[i] = ec._User_id(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec._User_name(ctx, field, obj)

		case "email":

			out.Values[i] = ec._User_email(ctx, field, obj)

		case "org":

			out.Values[i] = ec._User_org(ctx, field, obj)

		case "role":

			out.Values[i] = ec._User_role(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":

			out.Values[i] = ec.___Directive_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Directive_description(ctx, field, obj)

		case "locations":

			out.Values[i] = ec.___Directive_locations(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":

			out.Values[i] = ec.___Directive_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isRepeatable":

			out.Values[i] = ec.___Directive_isRepeatable(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":

			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)

		case "isDeprecated":

			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":

			out.Values[i] = ec.___Field_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___Field_description(ctx, field, obj)

		case "args":

			out.Values[i] = ec.___Field_args(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":

			out.Values[i] = ec.___Field_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":

			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":

			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":

			out.Values[i] = ec.___InputValue_name(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":

			out.Values[i] = ec.___InputValue_description(ctx, field, obj)

		case "type":

			out.Values[i] = ec.___InputValue_type(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":

			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "description":

			out.Values[i] = ec.___Schema_description(ctx, field, obj)

		case "types":

			out.Values[i] = ec.___Schema_types(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":

			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":

			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)

		case "subscriptionType":

			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)

		case "directives":

			out.Values[i] = ec.___Schema_directives(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":

			out.Values[i] = ec.___Type_kind(ctx, field, obj)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":

			out.Values[i] = ec.___Type_name(ctx, field, obj)

		case "description":

			out.Values[i] = ec.___Type_description(ctx, field, obj)

		case "fields":

			out.Values[i] = ec.___Type_fields(ctx, field, obj)

		case "interfaces":

			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)

		case "possibleTypes":

			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)

		case "enumValues":

			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)

		case "inputFields":

			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)

		case "ofType":

			out.Values[i] = ec.___Type_ofType(ctx, field, obj)

		case "specifiedByURL":

			out.Values[i] = ec.___Type_specifiedByURL(ctx, field, obj)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBlockInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockInput(ctx context.Context, v interface{}) (*model.BlockInput, error) {
	res, err := ec.unmarshalInputBlockInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNConnectionInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnectionInput(ctx context.Context, v interface{}) (*model.ConnectionInput, error) {
	res, err := ec.unmarshalInputConnectionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCreateUserInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐCreateUserInput(ctx context.Context, v interface{}) (model.CreateUserInput, error) {
	res, err := ec.unmarshalInputCreateUserInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDevice2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevice(ctx context.Context, sel ast.SelectionSet, v *model.Device) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._Device(ctx, sel, v)
}

func (ec *executionContext) unmarshalNDeviceInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceInput(ctx context.Context, v interface{}) (model.DeviceInput, error) {
	res, err := ec.unmarshalInputDeviceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDeviceLink2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceLink(ctx context.Context, sel ast.SelectionSet, v *model.DeviceLink) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._DeviceLink(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEditConnectionInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐEditConnectionInput(ctx context.Context, v interface{}) (*model.EditConnectionInput, error) {
	res, err := ec.unmarshalInputEditConnectionInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNEditDeviceInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐEditDeviceInput(ctx context.Context, v interface{}) (model.EditDeviceInput, error) {
	res, err := ec.unmarshalInputEditDeviceInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFieldParam2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐFieldParam(ctx context.Context, sel ast.SelectionSet, v *model.FieldParam) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec._FieldParam(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFloat2float64(ctx context.Context, v interface{}) (float64, error) {
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFloat2float64(ctx context.Context, sel ast.SelectionSet, v float64) graphql.Marshaler {
	res := graphql.MarshalFloatContext(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNIpmiCommand2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐIpmiCommand(ctx context.Context, v interface{}) (model.IpmiCommand, error) {
	var res model.IpmiCommand
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNIpmiCommand2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐIpmiCommand(ctx context.Context, sel ast.SelectionSet, v model.IpmiCommand) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNKindCatPair2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKindCatPair(ctx context.Context, v interface{}) (*model.KindCatPair, error) {
	res, err := ec.unmarshalInputKindCatPair(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLatLngInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLngInput(ctx context.Context, v interface{}) (model.LatLngInput, error) {
	res, err := ec.unmarshalInputLatLngInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNLatLngInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLngInput(ctx context.Context, v interface{}) (*model.LatLngInput, error) {
	res, err := ec.unmarshalInputLatLngInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNProvisionInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐProvisionInput(ctx context.Context, v interface{}) (model.ProvisionInput, error) {
	res, err := ec.unmarshalInputProvisionInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNRole2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐRole(ctx context.Context, v interface{}) (model.Role, error) {
	var res model.Role
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRole2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v model.Role) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNSiteInput2githubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSiteInput(ctx context.Context, v interface{}) (model.SiteInput, error) {
	res, err := ec.unmarshalInputSiteInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTagInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐTagInput(ctx context.Context, v interface{}) (*model.TagInput, error) {
	res, err := ec.unmarshalInputTagInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "the requested element is null which the schema does not allow")
		}
	}
	return res
}

func (ec *executionContext) marshalOApiTokens2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐAPITokens(ctx context.Context, sel ast.SelectionSet, v *model.APITokens) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ApiTokens(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBBox2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBBox(ctx context.Context, v interface{}) (*model.BBox, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBBox(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBlock2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlock(ctx context.Context, sel ast.SelectionSet, v []*model.Block) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBlock2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlock(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBlock2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlock(ctx context.Context, sel ast.SelectionSet, v *model.Block) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Block(ctx, sel, v)
}

func (ec *executionContext) marshalOBlockChart2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockChart(ctx context.Context, sel ast.SelectionSet, v []*model.BlockChart) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBlockChart2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockChart(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBlockChart2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockChart(ctx context.Context, sel ast.SelectionSet, v *model.BlockChart) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlockChart(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlockInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockInputᚄ(ctx context.Context, v interface{}) ([]*model.BlockInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.BlockInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlockInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐBlockInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	return res
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	return res
}

func (ec *executionContext) marshalOChartKey2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐChartKey(ctx context.Context, sel ast.SelectionSet, v []*model.ChartKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOChartKey2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐChartKey(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOChartKey2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐChartKey(ctx context.Context, sel ast.SelectionSet, v *model.ChartKey) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ChartKey(ctx, sel, v)
}

func (ec *executionContext) marshalOConnection2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnection(ctx context.Context, sel ast.SelectionSet, v []*model.Connection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOConnection2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnection(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOConnection2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnection(ctx context.Context, sel ast.SelectionSet, v *model.Connection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Connection(ctx, sel, v)
}

func (ec *executionContext) marshalOConnectionEntity2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnectionEntity(ctx context.Context, sel ast.SelectionSet, v *model.ConnectionEntity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ConnectionEntity(ctx, sel, v)
}

func (ec *executionContext) unmarshalOConnectionInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnectionInputᚄ(ctx context.Context, v interface{}) ([]*model.ConnectionInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.ConnectionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNConnectionInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐConnectionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalODependencies2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDependencies(ctx context.Context, sel ast.SelectionSet, v *model.Dependencies) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Dependencies(ctx, sel, v)
}

func (ec *executionContext) marshalODevice2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDevice2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevice(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalODevice2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevice(ctx context.Context, sel ast.SelectionSet, v *model.Device) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Device(ctx, sel, v)
}

func (ec *executionContext) marshalODeviceLink2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceLinkᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.DeviceLink) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNDeviceLink2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalODeviceStatus2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceStatus(ctx context.Context, v interface{}) (*model.DeviceStatus, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.DeviceStatus)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalODeviceStatus2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDeviceStatus(ctx context.Context, sel ast.SelectionSet, v *model.DeviceStatus) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalODevicesResult2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐDevicesResult(ctx context.Context, sel ast.SelectionSet, v *model.DevicesResult) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._DevicesResult(ctx, sel, v)
}

func (ec *executionContext) unmarshalOEditConnectionInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐEditConnectionInputᚄ(ctx context.Context, v interface{}) ([]*model.EditConnectionInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.EditConnectionInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNEditConnectionInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐEditConnectionInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOEntityType2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐEntityType(ctx context.Context, v interface{}) (*model.EntityType, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.EntityType)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOEntityType2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐEntityType(ctx context.Context, sel ast.SelectionSet, v *model.EntityType) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOFieldParam2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐFieldParamᚄ(ctx context.Context, sel ast.SelectionSet, v []*model.FieldParam) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNFieldParam2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐFieldParam(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOFloat2ᚖfloat64(ctx context.Context, v interface{}) (*float64, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalFloatContext(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFloat2ᚖfloat64(ctx context.Context, sel ast.SelectionSet, v *float64) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalFloatContext(*v)
	return graphql.WrapContextMarshaler(ctx, res)
}

func (ec *executionContext) unmarshalOID2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNID2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOID2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNID2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalID(*v)
	return res
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalInt(*v)
	return res
}

func (ec *executionContext) marshalOKPI2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKpi(ctx context.Context, sel ast.SelectionSet, v []*model.Kpi) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOKPI2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKpi(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOKPI2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKpi(ctx context.Context, sel ast.SelectionSet, v *model.Kpi) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._KPI(ctx, sel, v)
}

func (ec *executionContext) unmarshalOKindCatPair2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKindCatPairᚄ(ctx context.Context, v interface{}) ([]*model.KindCatPair, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.KindCatPair, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNKindCatPair2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐKindCatPair(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOLatLng2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLng(ctx context.Context, sel ast.SelectionSet, v *model.LatLng) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._LatLng(ctx, sel, v)
}

func (ec *executionContext) unmarshalOLatLngInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐLatLngInput(ctx context.Context, v interface{}) (*model.LatLngInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputLatLngInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMapSettings2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐMapSettings(ctx context.Context, sel ast.SelectionSet, v *model.MapSettings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._MapSettings(ctx, sel, v)
}

func (ec *executionContext) marshalOMetric2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐMetric(ctx context.Context, sel ast.SelectionSet, v []*model.Metric) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMetric2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐMetric(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOMetric2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐMetric(ctx context.Context, sel ast.SelectionSet, v *model.Metric) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Metric(ctx, sel, v)
}

func (ec *executionContext) marshalOOktoResource2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐOktoResource(ctx context.Context, sel ast.SelectionSet, v []*model.OktoResource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOOktoResource2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐOktoResource(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOOktoResource2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐOktoResource(ctx context.Context, sel ast.SelectionSet, v *model.OktoResource) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._OktoResource(ctx, sel, v)
}

func (ec *executionContext) marshalOProgress2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐProgress(ctx context.Context, sel ast.SelectionSet, v *model.Progress) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Progress(ctx, sel, v)
}

func (ec *executionContext) marshalOProvisionChart2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐProvisionChart(ctx context.Context, sel ast.SelectionSet, v *model.ProvisionChart) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ProvisionChart(ctx, sel, v)
}

func (ec *executionContext) unmarshalORole2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐRole(ctx context.Context, v interface{}) (*model.Role, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Role)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalORole2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐRole(ctx context.Context, sel ast.SelectionSet, v *model.Role) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalOServer2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServer(ctx context.Context, sel ast.SelectionSet, v []*model.Server) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOServer2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServer(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOServer2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServer(ctx context.Context, sel ast.SelectionSet, v *model.Server) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Server(ctx, sel, v)
}

func (ec *executionContext) marshalOService2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐService(ctx context.Context, sel ast.SelectionSet, v []*model.Service) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOService2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐService(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOService2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐService(ctx context.Context, sel ast.SelectionSet, v *model.Service) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Service(ctx, sel, v)
}

func (ec *executionContext) marshalOServiceChain2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServiceChain(ctx context.Context, sel ast.SelectionSet, v []*model.ServiceChain) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOServiceChain2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServiceChain(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOServiceChain2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐServiceChain(ctx context.Context, sel ast.SelectionSet, v *model.ServiceChain) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._ServiceChain(ctx, sel, v)
}

func (ec *executionContext) marshalOSettings2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSettings(ctx context.Context, sel ast.SelectionSet, v *model.Settings) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Settings(ctx, sel, v)
}

func (ec *executionContext) marshalOSite2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSite(ctx context.Context, sel ast.SelectionSet, v []*model.Site) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOSite2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSite(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOSite2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐSite(ctx context.Context, sel ast.SelectionSet, v *model.Site) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Site(ctx, sel, v)
}

func (ec *executionContext) unmarshalOStatus2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐStatus(ctx context.Context, v interface{}) (*model.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(model.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStatus2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐStatus(ctx context.Context, sel ast.SelectionSet, v *model.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	return res
}

func (ec *executionContext) unmarshalOTagInput2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐTagInputᚄ(ctx context.Context, v interface{}) ([]*model.TagInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*model.TagInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNTagInput2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐTagInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOTime2ᚖtimeᚐTime(ctx context.Context, v interface{}) (*time.Time, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalTime(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2ᚖtimeᚐTime(ctx context.Context, sel ast.SelectionSet, v *time.Time) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	res := graphql.MarshalTime(*v)
	return res
}

func (ec *executionContext) marshalOUser2ᚕᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v []*model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOUser2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐUser(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOUser2ᚖgithubᚗcomᚋstephenpmurrayᚋgqlgenᚋgraphᚋmodelᚐUser(ctx context.Context, sel ast.SelectionSet, v *model.User) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._User(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	for _, e := range ret {
		if e == graphql.Null {
			return graphql.Null
		}
	}

	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
